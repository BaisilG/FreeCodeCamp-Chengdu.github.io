<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FCC 成都社区</title>
  <icon>https://fcc-cd.dev/images/FCC-CDC-v1-1.png</icon>
  <subtitle>freeCodeCamp 成都社区</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fcc-cd.dev/"/>
  <updated>2020-06-15T16:00:00.000Z</updated>
  <id>https://fcc-cd.dev/</id>
  
  <author>
    <name>freeCodeCamp ChengDu community</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GraphQL + Koa + React 项目实践</title>
    <link href="https://fcc-cd.dev/article/engineering/graphql-koa-react-project-practice/"/>
    <id>https://fcc-cd.dev/article/engineering/graphql-koa-react-project-practice/</id>
    <published>2020-06-08T14:32:39.000Z</published>
    <updated>2020-06-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>源于 2019 年 11 月 16 日 <a href="https://fcc-cd.dev/">FCC 成都社区</a>主办的 <a href="https://web-conf.dev/#2019" target="_blank" rel="noopener">Web 全栈大会</a>上尹吉峰老师的 GraphQL 的分享，让我产生了浓厚的兴趣。GraphQL 是一个用于 API 的查询语言，是使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。</p><p>参考学习资料：</p><ul><li><a href="https://graphql.cn/learn/" target="_blank" rel="noopener">https://graphql.cn/learn/</a></li><li><a href="https://typescript.bootcss.com/basic-types.html" target="_blank" rel="noopener">https://typescript.bootcss.com/basic-types.html</a></li><li><a href="https://www.apollographql.com/docs/react/" target="_blank" rel="noopener">https://www.apollographql.com/docs/react/</a></li></ul><p>基于以上的一番学习，做了个实践的小项目，就代码做以下分析。</p><p>（附上项目地址：<a href="https://github.com/zhangyanling77/react-graphql-project" target="_blank" rel="noopener">react-graphql-project</a>）</p><a id="more"></a><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p>项目分为前端和后端两部分（目录 client 和 server），如图所示：</p><p><img src="9fj3stocj2s.webp" alt="目录截图"></p><p>使用技术栈：</p><ul><li><p>client：React hooks + TypeScript + Apollo + GraphQL + Ant Design</p></li><li><p>server: Koa 2 + GraphQL + koa-graphql + Mongoose</p></li></ul><h2 id="项目搭建及源码实现"><a href="#项目搭建及源码实现" class="headerlink" title="项目搭建及源码实现"></a>项目搭建及源码实现</h2><h3 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h3><p>使用的 MongoDB 数据库，这里对于该数据库的安装等不做赘述。</p><p>默认已经具备 MongoDB 的环境。接下来，启动数据库。</p><p>到 MongoDB 安装路径下，如 <strong>C:\Program Files\MongoDB\Server\4.2\bin</strong></p><p>打开终端，执行命令：</p><pre class=" language-bash"><code class="language-bash">mongod --dbpath<span class="token operator">=</span>./data</code></pre><p>创建项目总目录：react-graphql-project，并进入目录。</p><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><h4 id="创建项目，并初始化"><a href="#创建项目，并初始化" class="headerlink" title="创建项目，并初始化"></a>创建项目，并初始化</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> server <span class="token operator">&&</span> <span class="token function">cd</span> server<span class="token function">npm</span> init -y</code></pre><h4 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h4><pre class=" language-bash"><code class="language-bash">yarn add koa koa-grphql koa2-cors koa-mount koa-logger graphql</code></pre><h4 id="配置启动命令"><a href="#配置启动命令" class="headerlink" title="配置启动命令"></a>配置启动命令</h4><p><code>package.json</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nodemon index.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="业务开发"><a href="#业务开发" class="headerlink" title="业务开发"></a>业务开发</h4><h5 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h5><p><code>index.js</code></p><blockquote><p>这里我们启动一个 Koa 服务，进行日志监听，支持跨域操作，并将 GraphQL 服务挂到 Koa 服务上。<br>通过 koa-graphql 提供 HTTP 服务，传入 schema，并启动 graphiql。<br>graphiql 在测试和开发过程中都非常有用，但生产环境下应禁用它。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mount <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-mount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> graphqlHTTP <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa2-cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> myGraphQLSchema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./schema"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 日志</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跨域支持</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    origin<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    allowMethods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token function">mount</span><span class="token punctuation">(</span>    <span class="token string">"/graphql"</span><span class="token punctuation">,</span>    <span class="token function">graphqlHTTP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      schema<span class="token punctuation">:</span> myGraphQLSchema<span class="token punctuation">,</span>      graphiql<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 开启graphiql可视化操作playground</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server started on 4000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h5><p>创建 model 文件 <code>model.js</code></p><blockquote><p>这里我们建立数据链接，定义 schema，并生成对应的 model 导出。<br>schema 是 mongoose 里会用到的一种数据模式，可以理解为表结构的定义。每个 schema 会映射到 MongoDB 中的一个 collection，它并不具备操作数据库的能力。<br>model 是由 schema 生成的模型，可以对数据库进行操作。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建数据库连接</span><span class="token keyword">const</span> conn <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于定义表结构</span><span class="token keyword">const</span> CategorySchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增删改查</span><span class="token keyword">const</span> CategoryModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"Category"</span><span class="token punctuation">,</span> CategorySchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  category<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 外键</span>    ref<span class="token punctuation">:</span> <span class="token string">"Category"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"Product"</span><span class="token punctuation">,</span> ProductSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  CategoryModel<span class="token punctuation">,</span>  ProductModel<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>schema.js</code></p><blockquote><p>定义查询的 schema 对象。在 GraphGL 中有许多内置的 Schema Types 可供我们用来定义字段名类型。<br>这里我们通过定义查询对象类型，通过 model 就可以对数据库进行增、删、改、查等相应操作了。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> graphql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'graphql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CategoryModel<span class="token punctuation">,</span> ProductModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./model'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>  GraphQLObjectType<span class="token punctuation">,</span>  GraphQLString<span class="token punctuation">,</span>  GraphQLSchema<span class="token punctuation">,</span>  GraphQLList<span class="token punctuation">,</span>  GraphQLNonNull<span class="token punctuation">}</span>  <span class="token operator">=</span> graphql<span class="token comment" spellcheck="true">// 分类类型定义</span><span class="token keyword">const</span> Category <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Category'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLString <span class="token punctuation">}</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLString <span class="token punctuation">}</span><span class="token punctuation">,</span>      products<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLList</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> ProductModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> category<span class="token punctuation">:</span> parent<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> result        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 商品类型定义</span><span class="token keyword">const</span> Product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Product'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根查询对象</span><span class="token keyword">const</span> RootQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RootQuery'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getCategory<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 通过id获取分类</span>      type<span class="token punctuation">:</span> Category<span class="token punctuation">,</span>      args<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLNonNull</span><span class="token punctuation">(</span>GraphQLString<span class="token punctuation">)</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> CategoryModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token keyword">return</span> result      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ... 其他查询定义</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根变更对象</span><span class="token keyword">const</span> RootMutation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RootMutation'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    addCategory<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//根据name添加分类</span>      type<span class="token punctuation">:</span> Category<span class="token punctuation">,</span>      args<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLNonNull</span><span class="token punctuation">(</span>GraphQLString<span class="token punctuation">)</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> CategoryModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token keyword">return</span> result      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ... 其他变更定义</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLSchema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  query<span class="token punctuation">:</span> RootQuery<span class="token punctuation">,</span>  mutation<span class="token punctuation">:</span> RootMutation<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><pre class=" language-bash"><code class="language-bash">yarn start</code></pre><p>访问 <a href="http://localhost:4000/graphql" target="_blank" rel="noopener">http://localhost:4000/graphql</a> 看到数据库操作 playground 界面。可进行一系列数据库 CRUD 操作。</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><pre class=" language-bash"><code class="language-bash">npx create-react-app client --template typescript</code></pre><h4 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h4><pre class=" language-bash"><code class="language-bash">yarn add react-app-rewired customize-cra</code></pre><p>更改 <code>package.json</code> 文件的 <code>scripts</code> 启动命令</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired test"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在根目录下新建 <code>config-overrides.js</code> 文件，以添加 webpack 的相关配置。</p><p>安装前端 UI 组件库 <code>antd</code>，并配置按需加载、路径别名支持等。</p><pre class=" language-Shell"><code class="language-Shell">yarn add antd babel-plugin-import</code></pre><p><code>config-overrides.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> override<span class="token punctuation">,</span> fixBabelImports<span class="token punctuation">,</span> addWebpackAlias <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"customize-cra"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>  <span class="token function">fixBabelImports</span><span class="token punctuation">(</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    libraryName<span class="token punctuation">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>    libraryDirectory<span class="token punctuation">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>    style<span class="token punctuation">:</span> <span class="token string">"css"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">addWebpackAlias</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为 TS 无法识别，还需配置 tconfig.json 文件。</p></blockquote><p>新建 <code>paths.json</code> 文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更改 <code>tconfig.json</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES5"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"DOM"</span><span class="token punctuation">,</span> <span class="token string">"DOM.Iterable"</span><span class="token punctuation">,</span> <span class="token string">"ESNext"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./paths.json"</span><span class="token punctuation">}</span></code></pre><p>重启项目后生效。</p><h4 id="业务开发-1"><a href="#业务开发-1" class="headerlink" title="业务开发"></a>业务开发</h4><h5 id="入口文件-1"><a href="#入口文件-1" class="headerlink" title="入口文件"></a>入口文件</h5><p><code>index.tsx</code></p><blockquote><p>首先我们需要创建 Apollo 客户端，传入启动的后端地址作为 uri 的值，将生成的客户端实例通过 context 注入到整个单页应用中。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">import</span> ApolloClient <span class="token keyword">from</span> <span class="token string">"apollo-boost"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ApolloProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@apollo/react-hooks"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建apollo客户端</span><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  uri<span class="token punctuation">:</span> <span class="token string">"http://localhost:4000/graphql"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator"><</span>ApolloProvider client<span class="token operator">=</span><span class="token punctuation">{</span>client<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator"><</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator"><</span><span class="token operator">/</span>ApolloProvider<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="路由文件"><a href="#路由文件" class="headerlink" title="路由文件"></a>路由文件</h5><p><code>router.js</code></p><blockquote><p>主要包括商品列表页、商品详情等路由的配置。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Spin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Layouts <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/layouts"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductList <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/pages/productlist"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductDetail <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/pages/productdetail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> RouterComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>Router<span class="token operator">></span>      <span class="token operator"><</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator"><</span>Spin size<span class="token operator">=</span><span class="token string">"large"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator"><</span>Layouts<span class="token operator">></span>          <span class="token operator"><</span>Switch<span class="token operator">></span>            <span class="token operator"><</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductList<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator"><</span>Route path<span class="token operator">=</span><span class="token string">"/detail/:id"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductDetail<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator"><</span>Route render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator"><</span>h1<span class="token operator">></span><span class="token number">404</span> Not Found<span class="token operator"><</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator"><</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>Layouts<span class="token operator">></span>      <span class="token operator"><</span><span class="token operator">/</span>Suspense<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="定义类型文件"><a href="#定义类型文件" class="headerlink" title="定义类型文件"></a>定义类型文件</h5><p><code>types.ts</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  products<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator"><</span>Product<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  category<span class="token operator">?</span><span class="token punctuation">:</span> Category<span class="token punctuation">;</span>  categoryId<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="布局组件"><a href="#布局组件" class="headerlink" title="布局组件"></a>布局组件</h5><p><code>src/components/layouts</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Layout<span class="token punctuation">,</span> Menu <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Header<span class="token punctuation">,</span> Content<span class="token punctuation">,</span> Footer <span class="token punctuation">}</span> <span class="token operator">=</span> Layout<span class="token punctuation">;</span><span class="token keyword">const</span> Layouts <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator"><</span>Layout className<span class="token operator">=</span><span class="token string">"layout"</span><span class="token operator">></span>    <span class="token operator"><</span>Header<span class="token operator">></span>      <span class="token operator"><</span>div className<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator"><</span>Menu        theme<span class="token operator">=</span><span class="token string">"dark"</span>        mode<span class="token operator">=</span><span class="token string">"horizontal"</span>        defaultSelectedKeys<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> lineHeight<span class="token punctuation">:</span> <span class="token string">"64px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        <span class="token operator"><</span>Menu<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>          <span class="token operator"><</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>商品管理<span class="token operator"><</span><span class="token operator">/</span>Link<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">></span>      <span class="token operator"><</span><span class="token operator">/</span>Menu<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Header<span class="token operator">></span>    <span class="token operator"><</span>Content style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> padding<span class="token punctuation">:</span> <span class="token string">"50px 50px 0 50px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator"><</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span> padding<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> minHeight<span class="token punctuation">:</span> <span class="token number">280</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>      <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Content<span class="token operator">></span>    <span class="token operator"><</span>Footer style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">"center"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      ©<span class="token number">2019</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> Created by zhangyanling77<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token string">" "</span><span class="token punctuation">}</span>    <span class="token operator"><</span><span class="token operator">/</span>Footer<span class="token operator">></span>  <span class="token operator"><</span><span class="token operator">/</span>Layout<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Layouts<span class="token punctuation">;</span></code></pre><h5 id="GraphQL-查询语句文件"><a href="#GraphQL-查询语句文件" class="headerlink" title="GraphQL 查询语句文件"></a>GraphQL 查询语句文件</h5><p><code>api.ts</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> gql <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"apollo-boost"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取所有的商品</span><span class="token keyword">export</span> <span class="token keyword">const</span> GET_PRODUCTS <span class="token operator">=</span> gql<span class="token template-string"><span class="token string">`  query {    getProducts {      id      name      category {        id        name        products {          id          name        }      }    }  }`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ... 其他查询语句定义</span></code></pre><h5 id="商品列表组件-ProductList"><a href="#商品列表组件-ProductList" class="headerlink" title="商品列表组件 ProductList"></a>商品列表组件 ProductList</h5><blockquote><p>实现商品列表展示、删除商品、新增商品等功能。</p></blockquote><p><img src="1patw3gmssb.webp" alt="商品列表页"></p><p><img src="xnh3kuvujl.webp" alt="删除商品"></p><p><img src="1tgd9h2osm8.webp" alt="新增商品"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ... 其他依赖引入</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery<span class="token punctuation">,</span> useMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@apollo/react-hooks"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  CATEGORIES_PRODUCTS<span class="token punctuation">,</span>  GET_PRODUCTS<span class="token punctuation">,</span>  ADD_PRODUCT<span class="token punctuation">,</span>  DELETE_PRODUCT<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">const</span> ProductList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... 其他状态定义</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>CATEGORIES_PRODUCTS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>deleteProduct<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>DELETE_PRODUCT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ... 错误处理，加载中处理</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> getCategories<span class="token punctuation">,</span> getProducts <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">const</span> confirm <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> record<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除商品</span>    <span class="token keyword">await</span> <span class="token function">deleteProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      variables<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> record<span class="token operator">?</span><span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">,</span>      refetchQueries<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          query<span class="token punctuation">:</span> GET_PRODUCTS        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCurrent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>div<span class="token operator">></span>      <span class="token operator"><</span>Row style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> padding<span class="token punctuation">:</span> <span class="token string">"0 0 20px 0"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator"><</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">}</span><span class="token operator">></span>          <span class="token operator"><</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>            新增          <span class="token operator"><</span><span class="token operator">/</span>Button<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>Col<span class="token operator">></span>      <span class="token operator"><</span><span class="token operator">/</span>Row<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span>visible <span class="token operator">&&</span> <span class="token punctuation">(</span>        <span class="token operator"><</span>AddForm          handleOk<span class="token operator">=</span><span class="token punctuation">{</span>handleOk<span class="token punctuation">}</span>          handleCancel<span class="token operator">=</span><span class="token punctuation">{</span>handleCancel<span class="token punctuation">}</span>          categories<span class="token operator">=</span><span class="token punctuation">{</span>getCategories<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> AddForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> handleOk<span class="token punctuation">,</span> handleCancel<span class="token punctuation">,</span> categories <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... 其他状态定义</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>addProduct<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>ADD_PRODUCT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      variables<span class="token punctuation">:</span> product<span class="token punctuation">,</span>      refetchQueries<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 添加成功后执行查询全部商品的操作，是个回调</span>          query<span class="token punctuation">:</span> GET_PRODUCTS        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> categoryId<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空表单</span>    <span class="token function">handleOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>Modal      title<span class="token operator">=</span><span class="token string">"新增产品"</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token operator">></span>      <span class="token operator"><</span>Form<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>Form<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Modal<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ProductList<span class="token punctuation">;</span></code></pre><h5 id="商品详情组件-ProductDetail"><a href="#商品详情组件-ProductDetail" class="headerlink" title="商品详情组件 ProductDetail"></a>商品详情组件 ProductDetail</h5><blockquote><p>根据 ID 查询商品详情及其所属商品分类下的所有商品。</p></blockquote><p><img src="8bfps0iinjw.webp" alt="商品详情"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@apollo/react-hooks"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> GET_PRODUCT <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Product <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/types"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductDetail <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _id <span class="token operator">=</span> props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>GET_PRODUCT<span class="token punctuation">,</span> <span class="token punctuation">{</span>    variables<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> _id <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ... 错误处理</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> getProduct <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    id<span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    category<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> categoryId<span class="token punctuation">,</span> name<span class="token punctuation">:</span> categoryName<span class="token punctuation">,</span> products <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> getProduct<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>div<span class="token operator">></span>      <span class="token operator"><</span>Card title<span class="token operator">=</span><span class="token string">"商品详情"</span> bordered<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token string">"100%"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator"><</span>div<span class="token operator">></span>          <span class="token operator"><</span>p<span class="token operator">></span>            <span class="token operator"><</span>b<span class="token operator">></span>商品ID：<span class="token operator"><</span><span class="token operator">/</span>b<span class="token operator">></span>            <span class="token punctuation">{</span>id<span class="token punctuation">}</span>          <span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token operator"><</span>p<span class="token operator">></span>            <span class="token operator"><</span>b<span class="token operator">></span>商品名称：<span class="token operator"><</span><span class="token operator">/</span>b<span class="token operator">></span>            <span class="token punctuation">{</span>name<span class="token punctuation">}</span>          <span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token comment" spellcheck="true">// ... 商品列表展示</span>      <span class="token operator"><</span><span class="token operator">/</span>Card<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ProductDetail<span class="token punctuation">;</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过这个项目实践，基本掌握了 GraphQL 的使用。虽然这个项目只包含了简单的 CRUD 功能，但是对后端、数据库、前端都涉及到了，因此对于学习拓展来说也是不错的。后续也继续实现了登录验证、个人中心等功能，这里不做详细介绍，可自行查看项目代码了解。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;源于 2019 年 11 月 16 日 &lt;a href=&quot;https://fcc-cd.dev/&quot;&gt;FCC 成都社区&lt;/a&gt;主办的 &lt;a href=&quot;https://web-conf.dev/#2019&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web 全栈大会&lt;/a&gt;上尹吉峰老师的 GraphQL 的分享，让我产生了浓厚的兴趣。GraphQL 是一个用于 API 的查询语言，是使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。&lt;/p&gt;
&lt;p&gt;参考学习资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://graphql.cn/learn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://graphql.cn/learn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://typescript.bootcss.com/basic-types.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://typescript.bootcss.com/basic-types.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.apollographql.com/docs/react/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于以上的一番学习，做了个实践的小项目，就代码做以下分析。&lt;/p&gt;
&lt;p&gt;（附上项目地址：&lt;a href=&quot;https://github.com/zhangyanling77/react-graphql-project&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-graphql-project&lt;/a&gt;）&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="React" scheme="https://fcc-cd.dev/tags/React/"/>
    
      <category term="GraphQL" scheme="https://fcc-cd.dev/tags/GraphQL/"/>
    
      <category term="Apollo" scheme="https://fcc-cd.dev/tags/Apollo/"/>
    
      <category term="Koa" scheme="https://fcc-cd.dev/tags/Koa/"/>
    
      <category term="MongoDB" scheme="https://fcc-cd.dev/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 效率工具</title>
    <link href="https://fcc-cd.dev/article/engineering/javascript-efficiency-utility/"/>
    <id>https://fcc-cd.dev/article/engineering/javascript-efficiency-utility/</id>
    <published>2020-06-08T02:15:48.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每当看到发在 <a href="https://fcc-cd.dev/">FCC 成都社区</a>群里的技术文章，<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>都忍不住去指出它的不足。</p><p>今天评注的文章题为<a href="https://mp.weixin.qq.com/s/4oQc_SYxK4vIKCWWOKwoCw" target="_blank" rel="noopener">《一批提升你工作效率的 JS 工具方法》</a>，文中的 60 个方法与<a href="https://git-pager.leanapp.cn/article/engineering/ecmascript-dom-skills/" target="_blank" rel="noopener">上次评注的“24 个 ES 方法”</a>类似，不够<strong>简洁</strong>、<strong>优雅</strong>，与<strong>最新 ECMAScript、DOM 标准</strong>有些差距，有些“复制粘贴老文章片段”的感觉。</p><p>接下来，我就按功能类别来对一些有必要优化的工具方法一一重构。</p><a id="more"></a><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>完全基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式</a>的检验规则其实可以不用封装成函数，全放在独立的模块中，导入后直接 <code>/regexp/.test(data)</code> 即可。</p><h3 id="电邮地址"><a href="#电邮地址" class="headerlink" title="电邮地址"></a>电邮地址</h3><pre class=" language-JavaScript"><code class="language-JavaScript">export const Email = /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/// 原文：/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/</code></pre><p>「注解」</p><ul><li><code>\w</code> 即为 <code>[a-zA-Z0-9_]</code></li><li><code>[]</code> 表示一个<strong>字符范围</strong>，就是一个整体，无需 <code>()</code> 包围</li><li>Gmail 等服务商还支持形如 <code>name.filter@gmail.com</code> 这样的用户别名邮箱</li><li><code>(.[a-zA-Z0-9_-]{2,3}){1,2}</code> 只适用于前些年常见的 <code>.cn</code>、<code>.com.cn</code> 一类根域名，近几年新增的 <code>.name</code>、<code>.info</code>、<code>.club</code>、<code>.camp</code> 等域名就失效了，形如 <code>vip.xxmail.com</code> 的多级域名也不适用</li></ul><h3 id="手机号码"><a href="#手机号码" class="headerlink" title="手机号码"></a>手机号码</h3><p>其实以下只适用于中国大陆手机号，其它国家手机号似乎与固定电话号之间没有明显的区分。</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const Mobile = /^1[3-9]\d{9}$/;// 原文：/^1[0-9]{10}$/</code></pre><p>「注解」</p><ul><li><code>\d</code> 即为 <code>[0-9]</code></li><li>中国大陆手机号第二位目前没有 1、2</li></ul><h3 id="固话号码"><a href="#固话号码" class="headerlink" title="固话号码"></a>固话号码</h3><p>中国大陆固定电话号码“区号 + 机号”始终为 11 位。</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const Phone = /^((0\d{2}-)?\d{8}|(0\d{3}-)?\d{7})$/;// 原文：/^([0-9]{3,4}-)?[0-9]{7,8}$/</code></pre><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><pre class=" language-JavaScript"><code class="language-JavaScript">export const URL = /^\w+:\/\/\S+$/;// 原文：/^http[s]?:\/\/.*/</code></pre><p>「注解」</p><ul><li>URL 协议不仅包括 <code>http</code>、<code>https</code>，还有 <code>ftp</code>（文件传输）、<code>file</code>（本机文件系统）、<code>ed2k</code>（电驴 2000）等各种各样的<strong>网络协议</strong></li><li>URL 主机名、路径可以是 <a href="https://home.unicode.org/" target="_blank" rel="noopener">Unicode</a> 中各种<strong>可见字符</strong>，但遇到空白符就结束</li></ul><h3 id="日期格式"><a href="#日期格式" class="headerlink" title="日期格式"></a>日期格式</h3><p>判断是否为合法的日期格式除了用正则之外，还可利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/Date" target="_blank" rel="noopener"><code>Date</code> 构造函数</a>内部的算法：</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const isDate = raw => !isNaN(+new Date(raw))</code></pre><p>对于无法解析为日期的数据，<code>date.toString()</code> 会返回“Invalid Date”，<code>date.getTime()</code> 对应的返回值则是 <code>NaN</code>。而<strong>算数运算符</strong>会调用对象的 <code>valueOf()</code> 方法，<code>date.valueOf()</code> 的返回值又与 <code>date.getTime()</code> 相同。</p><h3 id="汉字"><a href="#汉字" class="headerlink" title="汉字"></a>汉字</h3><p>“汉字”在计算机领域的学名叫<strong>中日韩统一表意文字</strong>（俗称 CJK），在 2017 年 6 月发布的 Unicode 10 标准中，它有了代码级明确的指代：</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const HanZi = /\p{Unified_Ideograph}/u;</code></pre><p><a href="https://zhuanlan.zhihu.com/p/33335629" target="_blank" rel="noopener">【详情参考】</a></p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>学习：正则分析器 <a href="https://regexr.com/" target="_blank" rel="noopener">RegExr</a>、<a href="https://regex101.com/" target="_blank" rel="noopener">Regex101</a></li><li>前端：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/Data_form_validation" target="_blank" rel="noopener">HTML 5 表单校验 API</a></li><li>后端：<a href="https://github.com/typestack/class-validator" target="_blank" rel="noopener">基于装饰器的数据校验</a></li></ul><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="阿拉伯数字转中文"><a href="#阿拉伯数字转中文" class="headerlink" title="阿拉伯数字转中文"></a>阿拉伯数字转中文</h3><p>ECMA-402 标准（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noopener">ECMAScript 国际化 API</a>）把各语言之间的<strong>数据格式转换算法</strong>都封装好了，我们引入 polyfill 就可以直接用：</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const toChineseNumber = raw =>    new Intl.NumberFormat('zh-Hans-u-nu-hanidec').format(raw)</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>判断一个值的类型，用比较<strong>构造函数名</strong>或<strong>类名</strong>的方式兼容性比较差，因为线上环境通常是压缩后的代码，自定义的函数名、类名不再是原名，应用开发者一般也不会实现 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noopener"><code>Symbol.toStringTag</code> getter 类成员</a>，导致 <code>Object.prototype.toString.call()</code> 只会返回默认值 <code>[object Object]</code>。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>综上，我们应该利用 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance" target="_blank" rel="noopener">JavaScript 原型继承</a>，来统一判断“值的类型归属”：</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const isType = (value, constructor) =>    Object(value) instanceof constructor;</code></pre><p>「注解」</p><ul><li><code>Object</code> 构造函数会返回所有基本值的包装对象</li></ul><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>下面，我再给出一个 TypeScript 的实现，让<strong>类型推断</strong>更加准确：</p><pre class=" language-TypeScript"><code class="language-TypeScript">export function isType<t>(    value: T, constructor: { new(...data: any[]): T }): value is T {    return Object(value) instanceof constructor;}</t></code></pre><pre class=" language-TypeScript"><code class="language-TypeScript">import { isType } from './utility';let test;if (isType(test, Number)) console.log(test!.toFixed(2));</code></pre><p><a href="https://www.typescriptlang.org/play/index.html#code/GYVwdgxgLglg9mABDAzgFQJ4AcCmAeNAPgAoA3AQwBsQcAuRNAGkQgRSgCcRo4P6BvRGBwB3YgDpJAE3JRy9cmAwBtALoBKemkQBfTYgrUcyFA0T8AUImuIOOKCA5IA8gCMAVjmhkqNdcjB2RQgcOGAWNk5uKF4AbgsdCwtKe0QoHHZ4ixhw4lRMXGJ09mYAORAAW1ccDnV-VkC4FPFKOABzIoyoAEJxGIAxGAAPHCliACY62KA" target="_blank" rel="noopener">【在编辑器中体验 TS 类型提示】</a></p><h2 id="浏览器检测"><a href="#浏览器检测" class="headerlink" title="浏览器检测"></a>浏览器检测</h2><p>以下使用 <code>globalThis</code> 是为了兼容浏览器主线程、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WorkerGlobalScope" target="_blank" rel="noopener">Web Worker</a>、<a href="https://nodejs.org/dist/latest-v12.x/docs/api/globals.html#globals_global" target="_blank" rel="noopener">Node.js</a>、<a href="https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts" target="_blank" rel="noopener">Deno</a> 等不同 JavaScript 运行时环境。</p><h3 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h3><pre class=" language-JavaScript"><code class="language-JavaScript">export const isBrowserVendor = (name, UA = globalThis.navigator?.userAgent || '') =>    UA.toLowerCase().includes(name);</code></pre><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><pre class=" language-JavaScript"><code class="language-JavaScript">export const isRobot = (UA = globalThis.navigator?.userAgent || '') =>    /bot|spider|crawler/i.test(UA);</code></pre><h2 id="去除-HTML-标签"><a href="#去除-HTML-标签" class="headerlink" title="去除 HTML 标签"></a>去除 HTML 标签</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>以下使用了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet" target="_blank" rel="noopener">non-greedy（非贪婪模式）</a>来提升性能，并规避正文中可能出现的示例代码没完全转译尖括号，导致删除错误。</p><pre class=" language-JavaScript"><code class="language-JavaScript">export const removeHtmlTag = raw => raw.replace(/<[\s\S]+?>/g, '');</code></pre><h3 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h3><p>下面再提供一种借助 DOM 引擎的实现：</p><pre class=" language-JavaScript"><code class="language-JavaScript">const box = document.createElement('template');export function removeHtmlTag(raw) {    box.innerHTML = raw;    return box.content.textContent;}</code></pre><h2 id="URL-参数追加"><a href="#URL-参数追加" class="headerlink" title="URL 参数追加"></a>URL 参数追加</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL" target="_blank" rel="noopener"><code>URL()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener"><code>URLSearchParams()</code></a> 在浏览器主线程、Web Worker、Node.js 10+、Deno 均全局可用。</p><pre class=" language-JavaScript"><code class="language-JavaScript">export function appendQuery(path, data, base = globalThis.location.href) {    const URI = new URL(path, base);    const { searchParams } = URI;    for (const key in data) searchParams.append(key, data[key]);    return URI + '';}</code></pre><h2 id="W3C、ECMA-标准"><a href="#W3C、ECMA-标准" class="headerlink" title="W3C、ECMA 标准"></a>W3C、ECMA 标准</h2><p>还有一些可以用新标准（部分为提案）直接实现的特性，集中罗列如下：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" target="_blank" rel="noopener"><code>.trim()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft" target="_blank" rel="noopener"><code>.trimStart()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight" target="_blank" rel="noopener"><code>.trimEnd()</code></a>（原文第 53 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener"><code>.includes()</code></a>（原文第 42 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from()</code></a>（原文第 48 条）</li><li><a href="https://github.com/TechQuery/array-unique-proposal" target="_blank" rel="noopener">数组去重</a>（原文第 44 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import#%E5%8A%A8%E6%80%81import" target="_blank" rel="noopener">动态 <code>import</code></a>（原文第 27 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList" target="_blank" rel="noopener"><code>element.classList</code></a>（原文第 29 ~ 31 条）</li><li><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener"><code>saveAs()</code></a>（原文第 28 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-transform" target="_blank" rel="noopener"><code>text-transform</code></a>（原文第 54 条）</li></ul><h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><p><img src="https://web-cell.dev/WebCell-1.fb612fdb.png" alt="WebCell"></p><p>水歌把日常开发中积累的各种工具方法，用 TypeScript 写成一个 <strong>Web 开源工具库</strong> —— <a href="https://web-cell.dev/web-utility/" target="_blank" rel="noopener">https://web-cell.dev/web-utility/</a> ，欢迎大家使用、改进！~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每当看到发在 &lt;a href=&quot;https://fcc-cd.dev/&quot;&gt;FCC 成都社区&lt;/a&gt;群里的技术文章，&lt;a href=&quot;https://github.com/TechQuery&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;水歌&lt;/a&gt;都忍不住去指出它的不足。&lt;/p&gt;
&lt;p&gt;今天评注的文章题为&lt;a href=&quot;https://mp.weixin.qq.com/s/4oQc_SYxK4vIKCWWOKwoCw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《一批提升你工作效率的 JS 工具方法》&lt;/a&gt;，文中的 60 个方法与&lt;a href=&quot;https://git-pager.leanapp.cn/article/engineering/ecmascript-dom-skills/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上次评注的“24 个 ES 方法”&lt;/a&gt;类似，不够&lt;strong&gt;简洁&lt;/strong&gt;、&lt;strong&gt;优雅&lt;/strong&gt;，与&lt;strong&gt;最新 ECMAScript、DOM 标准&lt;/strong&gt;有些差距，有些“复制粘贴老文章片段”的感觉。&lt;/p&gt;
&lt;p&gt;接下来，我就按功能类别来对一些有必要优化的工具方法一一重构。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="ECMAScript" scheme="https://fcc-cd.dev/tags/ECMAScript/"/>
    
      <category term="DOM" scheme="https://fcc-cd.dev/tags/DOM/"/>
    
      <category term="API" scheme="https://fcc-cd.dev/tags/API/"/>
    
      <category term="BOM" scheme="https://fcc-cd.dev/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题之验证栈序列</title>
    <link href="https://fcc-cd.dev/article/algorithm/verify-stack-sequence/"/>
    <id>https://fcc-cd.dev/article/algorithm/verify-stack-sequence/</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>先说一个消息，为了方便互相交流学习，青铜三人行建了个微信群，感兴趣的伙伴可以扫码加下面的小助手抱你入群哦！</p><figure>    <img src="https://pic2.zhimg.com/80/v2-ce9c805020726a8a18c4c870a8282985_1440w.jpg">    <figcaption>青铜三人行小助手（其实是 Helen）</figcaption></figure><hr><p>每周一题，代码无敌~ 这次的主题是 <strong>「贪心算法」</strong>：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=668415886&bvid=BV1ta4y1v7h8&cid=200192481&page=1"></iframe><a id="more"></a><h2 id="验证栈序列"><a href="#验证栈序列" class="headerlink" title="验证栈序列"></a><a href="https://leetcode-cn.com/problems/validate-stack-sequences/" target="_blank" rel="noopener">验证栈序列</a></h2><p>给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code>。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class=" language-text"><code class="language-text">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]输出：true解释：我们可以按以下顺序执行：push(1), push(2), push(3), push(4), pop() -> 4,push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class=" language-text"><code class="language-text">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]输出：false解释：1 不能在 2 之前弹出。</code></pre><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ol><li><code>0 <= pushed.length == popped.length <= 1000</code></li><li><code>0 <= pushed[i], popped[i] < 1000</code></li><li><code>pushed</code> 是 <code>popped</code> 的排列</li></ol><h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><p>要做这道题，首先得了解一下什么是 <strong>「栈」</strong>。为此书香搬来了<strong>维基百科</strong>上的解释：</p><blockquote><p><strong>堆栈</strong>（英语：stack）又称为<strong>栈</strong>或<strong>堆叠</strong>，是<a href="https://zh.wikipedia.org/wiki/%25E8%25A8%2588%25E7%25AE%2597%25E6%25A9%259F%25E7%25A7%2591%25E5%25AD%25B8" target="_blank" rel="noopener">计算机科学</a>中的一种<a href="https://zh.wikipedia.org/wiki/%25E6%258A%25BD%25E8%25B1%25A1%25E8%25B3%2587%25E6%2596%2599%25E5%259E%258B%25E5%2588%25A5" target="_blank" rel="noopener">抽象数据类型</a>，只允许在有序的线性数据集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照后进先出（LIFO, Last In First Out）的原理运作。</p></blockquote><blockquote><p><strong>栈</strong>常与另一种有序的线性数据集合<a href="https://zh.wikipedia.org/wiki/%25E4%25BD%2587%25E5%2588%2597" target="_blank" rel="noopener">队列</a>相提并论。 <strong>栈</strong>常用一维<a href="https://zh.wikipedia.org/wiki/%25E9%2599%25A3%25E5%2588%2597" target="_blank" rel="noopener">数组</a>或<a href="https://zh.wikipedia.org/wiki/%25E9%2580%25A3%25E7%25B5%2590%25E4%25B8%25B2%25E5%2588%2597" target="_blank" rel="noopener">链表</a>来实现。</p></blockquote><p>这个定义看起来多，其实也没什么大不了的。<strong>栈</strong>本身就是一个<strong>数组</strong>或者<strong>链表</strong>，只是<strong>人为定义</strong>它获取数据的方式只能从栈的<strong>顶端</strong>获取，因此遵循<strong>先进后出、后进先出</strong>的规则罢了。</p><p>想象<strong>栈</strong>就是一摞盘子，你只能在最上面放盘子或者拿走盘子。对应起来，栈的操作就有两个：</p><ul><li>push 操作，往栈顶放入一个数据。</li><li>pop 操作，从栈顶取走一个数据。</li></ul><p><img src="https://pic1.zhimg.com/80/v2-413de4df18cc333944027e29514aa99c_1440w.jpg" alt></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>回到这道题目，一开始看起来题目有点绕，让人不知道要做什么。后来 Helen 提议，既然题目要求是考虑在<em>最初空栈上进行的推入 push 和弹出 pop 操作</em>，那么我们不妨就建立一个<strong>空栈</strong>尝试用程序的方式来模拟一遍操作的流程，看看会不会明朗点：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function validateStackSequences(pushed, popped) {    const stack = [];    pushed.forEach(ele => {        stack.push(ele);        stack.pop();    });    return !stack.length;}</code></pre><p>这样我们就建立了一个<strong>栈</strong>，并且在按题目中 <code>pushed</code> 数组的顺序将元素 <code>push</code> 进栈， 然后再按照<strong>同样的顺序</strong> <code>pop</code> 出去。</p><p>不过这样子就跟数学题里面一边放水，一边加水的疯狂管理员一般，返回的结果肯定为 <code>true</code>。</p><p>回头再看看题目，发现其实就是在这个<strong>一边增加一边移出</strong>的过程上，添加了一个条件：只能按照 <code>poped</code> 的顺序来 <code>pop</code> 数据，看看能不能将 <code>stack</code> 清空 。</p><p>再拆解一下目标，就更明确了：</p><ul><li>按照 <code>pushed</code> 的顺序将元素 <code>push</code> 入栈。</li><li>在 <code>push</code> 的过程中尝试 <code>pop</code> 元素。</li><li><code>pop</code> 元素的顺序要和 <code>poped</code> 的顺序一样。</li></ul><p>要满足这三个条件，一个方法就是，<strong>尝试在 <code>push</code> 的每一步时，尽可能按照指定顺序 <code>pop</code> 出所有的元素</strong>。根据这个思路，Helen 给出了题解：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function validateStackSequences(pushed, popped) {    const stack = [];    let popIndex = 0;    for (const val of pushed) {        stack.push(val);        while (            stack.length !== 0 &&            stack[stack.length - 1] === popped[popIndex]        ) {            stack.pop();            popIndex++;        }    }    return stack.length === 0;}</code></pre><p>书香的思路一模一样，只是把代码写的更短了点 ：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function validateStackSequences(pushed, popped) {    const stack = [];    pushed.forEach(ele => {        stack.push(ele);        while (            stack.length &&            stack[stack.length - 1] === popped[0]        ) {            stack.pop();            popped.shift();        }    });    return !stack.length;}</code></pre><h3 id="Extra-Go"><a href="#Extra-Go" class="headerlink" title="Extra Go"></a>Extra Go</h3><p>对于书香和 Helen 这样的初级选手，通过实现一个<strong>栈</strong>结构来模拟题目中要求的操作，解出题目，就已经开心地到一边去玩耍了 ~</p><p>但对于追求完美的曾大师来说，<code>push</code> 和 <code>pop</code> 这两个操作，都非常消耗计算资源。而这种把数据一边 <code>push</code> 一边 <code>pop</code> 的疯狂操作显然是不能容忍的。</p><p>为此，他写出了 <strong>2 米长</strong>的 Go 语言代码：</p><pre class=" language-Go"><code class="language-Go">func validateStackSequences(pushed []int, popped []int) bool {    if len(popped) == 0 {        return true    }    pushedValues := make(map[int]int) //存储所有的已经入栈的值和数组索引    left := 0    right := 0    for i := 0; i < len(pushed); i++ {        if pushed[i] == popped[0] {            pushed[i] = -1  // 出栈            left = i-1            right = i+1            break        } else {            pushedValues[pushed[i]] = i        }    }    for j := 1; j < len(popped); j++ {        if _, ok := pushedValues[popped[j]]; ok { // 值已经加入stack了            for left >= 0 {                if pushed[left] == -1 {                    left--                } else {                    break                }            }            if left < 0 {                left = 0            }            if popped[j] != pushed[left] {                return false            } else { // 值相等，出栈                 pushed[left] = -1                 left--            }        } else { // 值没有加入stack，继续往前找             for right < len(popped) {                if popped[j] == pushed[right] { // 找到了                    pushed[right] = -1 //出栈                    left = right - 1 // 重新赋值left                    right ++  // 重新赋值right                    break                } else { // 没有找到，继续往前                    pushedValues[pushed[right]] = right                    right++                }            }        }    }    return true}</code></pre><p>嗯…… 8 ms 的运行时间……</p><p><img src="https://pic4.zhimg.com/80/v2-14d286e072f598b6b8ea2728f07a1d8b_1440w.jpg" alt></p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>不知道你有没有发现，这道题目，在开始的时候看起来比较绕，但是真正实现起来并没有那么困难？</p><p>其实关键点在于 <strong>「分而治之」</strong>，将任务中的每一步拆分开来，并且在每一步时，都<strong>尽可能去寻找最优解</strong>，再将每一步的最优解达到合起来，看是否能达成目标。</p><p>这种思路的算法就称为 <strong>「贪心算法」</strong>，它在遇到<strong>寻找最优解</strong>问题的情况下，能够提供很大的帮助。</p><p>下次见~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;先说一个消息，为了方便互相交流学习，青铜三人行建了个微信群，感兴趣的伙伴可以扫码加下面的小助手抱你入群哦！&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://pic2.zhimg.com/80/v2-ce9c805020726a8a18c4c870a8282985_1440w.jpg&quot;&gt;
    &lt;figcaption&gt;青铜三人行小助手（其实是 Helen）&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;每周一题，代码无敌~ 这次的主题是 &lt;strong&gt;「贪心算法」&lt;/strong&gt;：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=668415886&amp;bvid=BV1ta4y1v7h8&amp;cid=200192481&amp;page=1&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
      <category term="数据结构" scheme="https://fcc-cd.dev/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆栈" scheme="https://fcc-cd.dev/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】外篇之循环与递归</title>
    <link href="https://fcc-cd.dev/article/algorithm/loop-and-recursion/"/>
    <id>https://fcc-cd.dev/article/algorithm/loop-and-recursion/</id>
    <published>2020-06-01T18:03:00.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>不知不觉青铜三人行已经做了两个月的题了，这次轻松点，看看不一样的吧。</p><h2 id="机器擅长的事-——-重复"><a href="#机器擅长的事-——-重复" class="headerlink" title="机器擅长的事 —— 重复"></a>机器擅长的事 —— 重复</h2><p>作为专业的程序猿，经常被行业外的朋友问到，为什么要学习编程？其实，除了掌握技能提高工作效率、甚至成为职业以外。学习编程更重要的是：<strong>思维训练</strong>。</p><p>其实，计算机从一开始就是为了帮助人们解决复杂问题而设计出来的。而在这个过程中，计算机程序的「思考」模型是一个叫“图灵机”的计算模型，图灵机是图灵 (<strong>Alan Mathison Turing</strong>) 祖师爷模拟人思考而发明出来的。为什么图灵祖师爷要发明图灵机呢？是因为他想要试图以自己和自己周围的天才科学家的思维方式作为人类的具体实例，来抽象总结出一套解决问题的办法。所以说，计算机程序的运作方式其实是一种人类尝试<strong>用简单的方式逐步去解决复杂问题</strong>的天才的思考方式。</p><a id="more"></a><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="https://insights.thoughtworks.cn/think-as-a-machine/"></iframe><p>在如今的时代，计算机早已经充斥在我们生活的方方面面，想要更好地进行人机交互，或多或少地我们都需要一些「像机器一样」的思考方式。即使是作为专业程序员，不断培养自己<strong>像机器一样思考</strong>的思维模式也是必不可少的。</p><p>既然要像机器一样去思考，那么不妨从计算机最擅长的事情 —— 重复，开始说起吧。下面是来自 <em>TED-Ed</em> 中「<a href="https://ed.ted.com/search?qs=think+like+a+coder" target="_blank" rel="noopener">Think like coder</a>」系列课程的第一节，讲的就是计算机的重复 —— 循环。</p><iframe frameborder="0" allowfullscreen allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" src="https://www.youtube.com/embed/KFVdHDMcepw"></iframe><h2 id="各种编程语言的循环"><a href="#各种编程语言的循环" class="headerlink" title="各种编程语言的循环"></a>各种编程语言的循环</h2><p>来看看在实际编程中，不同编程语言的循环写法有什么不同吧！</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><pre class=" language-C"><code class="language-C">int jj;for (jj = 0; jj < 10; jj++)    printf("%d, ", jj);// => prints "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "printf("\n");</code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class=" language-Java"><code class="language-Java">// for loop structure => for(<start_statement>; <conditional>; <step>)for (int fooFor = 0; fooFor < 10; fooFor++)    System.out.println(fooFor);    // Iterated 10 times, fooFor 0->9System.out.println("fooFor Value: " + fooFor);</step></conditional></start_statement></code></pre><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class=" language-JavaScript"><code class="language-JavaScript">for (var i = 0; i < 5; i++) {    // will run 5 times}</code></pre><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre class=" language-Python"><code class="language-Python">for i in range(4):    print(i)</code></pre><pre class=" language-Python"><code class="language-Python">animals = ["dog", "cat", "mouse"]for i, value in enumerate(animals):    print(i, value)</code></pre><h4 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h4><pre class=" language-Rust"><code class="language-Rust"> // Rangesfor i in 0u32..10 {    print!("{} ", i);}println!("");// prints `0 1 2 3 4 5 6 7 8 9 `</code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><pre class=" language-Go"><code class="language-Go">for x := 0; x < 3; x++ { // ++ is a statement.    fmt.Println("iteration", x)}</code></pre><pre class=" language-Go"><code class="language-Go">for key, value := range map[string]int{"one": 1, "two": 2, "three": 3} {    // for each pair in the map, print key and value    fmt.Printf("key=%s, value=%d\n", key, value)}</code></pre><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h4><pre class=" language-C"><code class="language-C">int ii = 0;while (ii < 10)  //ANY value less than ten is true.    printf("%d, ", ii++); // ii++ increments ii AFTER using its current value.// => prints "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "printf("\n");</code></pre><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><pre class=" language-Java"><code class="language-Java">int fooWhile = 0;while(fooWhile < 100) {    System.out.println(fooWhile);    // Increment the counter    // Iterated 100 times, fooWhile 0,1,2...99    fooWhile++;}System.out.println("fooWhile Value: " + fooWhile);</code></pre><h4 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class=" language-JavaScript"><code class="language-JavaScript">// As does `while`.while (true) {    // An infinite loop!}</code></pre><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><pre class=" language-Python"><code class="language-Python">x = 0while x < 4:    print(x)    x += 1  # Shorthand for x = x + 1</code></pre><h4 id="Rust-1"><a href="#Rust-1" class="headerlink" title="Rust"></a>Rust</h4><pre class=" language-Rust"><code class="language-Rust"> while 1 == 1 {    println!("The universe is operating normally.");    // break statement gets out of the while loop.    //  It avoids useless iterations.    break}</code></pre><h4 id="Go-1"><a href="#Go-1" class="headerlink" title="Go"></a>Go</h4><pre class=" language-Go"><code class="language-Go">// Go 语言里面只有 for 循环，但是 for 循环可以不加范围for { // Infinite loop.    break    // Just kidding.    continue // Unreached.}</code></pre><h3 id="循环的本质"><a href="#循环的本质" class="headerlink" title="循环的本质"></a>循环的本质</h3><p>事实上，不管循环本身的写法和描述有什么改变，它的本质都是一种<strong>逻辑判断</strong>。也就是说，它们从根本上都是 <code>until</code> 循环的类型：</p><blockquote><p>当某条件满足的时候跳转到循环结束的地方，不然就跳转回循环开始的地方</p></blockquote><p>而基本所有的循环最后大概都会被编译成以下的样子，这叫做<strong>汇编语言</strong>，它是最接近计算机的思考方式的编程语言了。</p><pre class=" language-Assembly"><code class="language-Assembly">    mov eax, val1        ; 把变量 val1 放到 EAX 里面beginwhile:    cmp eax, val2        ; 比较 val1 和 val2    jnl     endwhile     ; 如果 val1 不小于 val2，就跳到 endwhile 的地方    inc    eax           ; val1++;    dec    val2          ; val2--;    jmp    beginwhile    ; 跳回到 beginwhile 的地方endwhile:    mov    val1, eax     ;保存 val1 的新值</code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>循环有一对「孪生兄弟」叫做<strong>递归</strong>。它们的作用都在于解决「重复」的事情。所不同的在于它们对于「重复」的部分的抽象描述不同</p><ul><li>如果把要重复执行的指令放在一个「块」里面，称为<strong>循环体</strong>，并通过外部变量来调整每次循环执行的数据，就叫做<strong>循环。</strong></li><li>如果把要重复执行的指令抽象成「函数」，并通过传参数的形式来调整每次执行的数据，就称作<strong>递归</strong>啦！</li></ul><p>关于递归的详情可以看看来自 Helen 的视频讲解：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=753456083&bvid=BV1ok4y1B7Cj&cid=197572573&page=1"></iframe><h2 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h2><p>好啦，这次并没有做题，要讲的内容就这么多啦。有时候换换心情和视野也是很重要的，希望这次的内容可以当做故事看看，了解一些更多的事情。下次见啦！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;不知不觉青铜三人行已经做了两个月的题了，这次轻松点，看看不一样的吧。&lt;/p&gt;
&lt;h2 id=&quot;机器擅长的事-——-重复&quot;&gt;&lt;a href=&quot;#机器擅长的事-——-重复&quot; class=&quot;headerlink&quot; title=&quot;机器擅长的事 —— 重复&quot;&gt;&lt;/a&gt;机器擅长的事 —— 重复&lt;/h2&gt;&lt;p&gt;作为专业的程序猿，经常被行业外的朋友问到，为什么要学习编程？其实，除了掌握技能提高工作效率、甚至成为职业以外。学习编程更重要的是：&lt;strong&gt;思维训练&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实，计算机从一开始就是为了帮助人们解决复杂问题而设计出来的。而在这个过程中，计算机程序的「思考」模型是一个叫“图灵机”的计算模型，图灵机是图灵 (&lt;strong&gt;Alan Mathison Turing&lt;/strong&gt;) 祖师爷模拟人思考而发明出来的。为什么图灵祖师爷要发明图灵机呢？是因为他想要试图以自己和自己周围的天才科学家的思维方式作为人类的具体实例，来抽象总结出一套解决问题的办法。所以说，计算机程序的运作方式其实是一种人类尝试&lt;strong&gt;用简单的方式逐步去解决复杂问题&lt;/strong&gt;的天才的思考方式。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 打包文件分析（下）</title>
    <link href="https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-1/"/>
    <id>https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-1/</id>
    <published>2020-05-27T16:00:00.000Z</published>
    <updated>2020-06-16T16:44:33.542Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上一篇<a href="/article/webpack-bundle-analyse-0/">webpack 打包文件分析（上）</a>我们讲到 <code>webpack</code> 打包源码中文件加载的部分，通过分析了解了在 <code>webpack</code> 中不同模块规范相互加载的处理。而至此，只包括了文件的<strong>同步加载</strong>分析，对于文件的异步加载又是如何处理的呢？</p><p>我们使用 <code>webpack</code> 将项目打包为一个 <code>bundle.js</code> 文件，通过 <code>script</code> 标签插入到页面中引用。但如果这个 <code>bundle.js</code> 体积特别大，就会导致我们加载时间过长，阻塞页面的渲染。</p><p>其次，这个打包出来的 <code>bundle.js</code> 中其实部分的代码资源是当前加载页面用不到的，这样也导致了浪费。于是，资源加载的优化就成了必须要考虑的问题，而异步加载（或者说动态加载）就是解决这个问题的方案之一。</p><a id="more"></a><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><p>在 <code>webpack</code> 中提供了符合 <a href="https://tc39.es/proposal-dynamic-import/" target="_blank" rel="noopener">ECMAScript 的 <code>import()</code> 语法</a>，允许我们动态的加载模块。（在 <code>webpack</code> 版本较低时，我们使用的代码动态加载方案是 <code>require.ensure</code> 方法，后面已经被 <code>import()</code> 取代）。</p><p>那么接下来，就继续探究一下<strong>异步加载</strong>的实现。</p><h3 id="关键文件"><a href="#关键文件" class="headerlink" title="关键文件"></a>关键文件</h3><ul><li><code>src/foo.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><ul><li><code>src/index.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">/* webpackChunkName: "foo"*/</span><span class="token punctuation">:</span> 魔法字符串，设置打包后的chunk名<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "foo" */</span> <span class="token string">"./foo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>webpack.config.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span>  output<span class="token punctuation">:</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出目录</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出文件名称</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// ...</span></code></pre><h3 id="bundle-分析"><a href="#bundle-分析" class="headerlink" title="bundle 分析"></a>bundle 分析</h3><p>打包后输出两个文件：</p><blockquote><p><code>foo.bundle.js</code> 因为是异步加载的方式，单独打包为一个文件。由于打包后的源码内容过长，这里省略部分已经分析过的代码块。</p></blockquote><ul><li><code>index.bundle.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 该对象用于存储已经加载和正在加载中的chunks   * undefined：表示chunk未加载   * null：表示chunk预加载 / 预获取   * Promise：表示chunk正在加载中   * 0: 表示chunk已经加载了   */</span>  <span class="token keyword">var</span> installedChunks <span class="token operator">=</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 默认入口模块已经加载完毕</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>moduleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置加载chunk的脚本路径 此处的 __webpack_require__.p 为 publicPath，默认为""</span>  <span class="token keyword">function</span> <span class="token function">jsonpScriptSrc</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      __webpack_require__<span class="token punctuation">.</span>p <span class="token operator">+</span>      <span class="token string">""</span> <span class="token operator">+</span>      <span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">||</span> chunkId<span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">".bundle.js"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 作用：懒加载代码块，原理使用 JSONP</span>  __webpack_require__<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">requireEnsure</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 异步加载时触发的错误函数</span>  __webpack_require__<span class="token punctuation">.</span>oe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存储的是传入的chunk</span>  <span class="token keyword">var</span> jsonpArray <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存储旧的 jsonpArray.push 方法</span>  <span class="token keyword">var</span> oldJsonpFunction <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用 webpackJsonpCallback 覆盖 jsonpArray.push 方法</span>  jsonpArray<span class="token punctuation">.</span>push <span class="token operator">=</span> webpackJsonpCallback<span class="token punctuation">;</span>  jsonpArray <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> jsonpArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> parentJsonpFunction <span class="token operator">=</span> oldJsonpFunction<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// __webpack_require__.s 用于缓存入口模块id</span>  <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步加载 foo</span>    __webpack_require__      <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"./src/foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>foo.bundle.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// [[这里存chunk的名称], {这个对象是存放chunk路径及chunk内容定义的键值对}]</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>      module<span class="token punctuation">,</span>      __webpack_exports__<span class="token punctuation">,</span>      __webpack_require__    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token string">"use strict"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 将模块标识为 ES Module</span>      __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 将函数内容定义挂在 default 上</span>      __webpack_exports__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看出，对于同步加载的部分（<code>index.js</code>），依然是使用 <code>__webpack_require__</code> 来进行加载的，这里不做赘述。</p><p>观察 <code>index.js</code> 中对于 <code>foo.js</code> 的加载可以发现，使用到了 <code>__webpack_require__.e</code> 方法，该方法接收 chunkName，返回一个 <code>promise</code>，再传入 chunk 的路径，通过 <code>__webpack_require__</code> 加载 chunk 的内容，最后输出。</p><p>那么关键点就是 <code>__webpack_require__.e</code> 这个方法了。</p><pre class=" language-javascript"><code class="language-javascript">__webpack_require__<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">requireEnsure</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取加载的chunk内容</span>  <span class="token keyword">var</span> installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedChunkData <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 0 表示已经加载过了</span>    <span class="token comment" spellcheck="true">// Promise 意味着 chunk 正在加载</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedChunkData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在chunk缓存中设置 Promise</span>      <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此时 installedChunkData = [resolve, reject, promise]</span>      promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> promise<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 开始加载chunk，jsonp方式</span>      <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> onScriptComplete<span class="token punctuation">;</span>      script<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置字符集</span>      script<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 和CSP相关</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"nonce"</span><span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 设置脚本的加载路径</span>      script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token function">jsonpScriptSrc</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 脚本加载完成、超时、出错的事件处理函数</span>      <span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      onScriptComplete <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 避免IE内存泄漏</span>        script<span class="token punctuation">.</span>onerror <span class="token operator">=</span> script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> chunk <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> errorType <span class="token operator">=</span>              event <span class="token operator">&&</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"load"</span> <span class="token operator">?</span> <span class="token string">"missing"</span> <span class="token punctuation">:</span> event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> realSrc <span class="token operator">=</span> event <span class="token operator">&&</span> event<span class="token punctuation">.</span>target <span class="token operator">&&</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">;</span>            error<span class="token punctuation">.</span>message <span class="token operator">=</span>              <span class="token string">"Loading chunk "</span> <span class="token operator">+</span>              chunkId <span class="token operator">+</span>              <span class="token string">" failed.\n("</span> <span class="token operator">+</span>              errorType <span class="token operator">+</span>              <span class="token string">": "</span> <span class="token operator">+</span>              realSrc <span class="token operator">+</span>              <span class="token string">")"</span><span class="token punctuation">;</span>            error<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ChunkLoadError"</span><span class="token punctuation">;</span>            error<span class="token punctuation">.</span>type <span class="token operator">=</span> errorType<span class="token punctuation">;</span>            error<span class="token punctuation">.</span>request <span class="token operator">=</span> realSrc<span class="token punctuation">;</span>            chunk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onScriptComplete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"timeout"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> script <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      script<span class="token punctuation">.</span>onerror <span class="token operator">=</span> script<span class="token punctuation">.</span>onload <span class="token operator">=</span> onScriptComplete<span class="token punctuation">;</span>      document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>分析这个方法，它的核心作用就是异步加载的实现。</p><ul><li><p>获取传入的 chunkName 在 <code>installedChunks</code> 对象中对应的加载状态，如果状态为非加载完成，则构造一个 <code>promise</code>，将它的 <code>resolve</code>、<code>reject</code> 作为该 chunk 的正在加载状态，并存入到 <code>promises</code> 中。</p></li><li><p>创建 <code>script</code> 标签，将 chunk 的路径作为脚本的加载路径，然后插入到页面的 <code><head></code> 中，让浏览器去下载这个 chunk。</p></li><li><p>最后返回 <code>promises</code> 的执行结果，让所有的 <code>promise</code> 都变为完成态，即完成所有 chunk 的加载。</p></li></ul><p>接着再来看 <code>foo.bundle.js</code>，整个代码体的目的是在向 <code>window.webpackJsonp</code> 中 <code>push</code> 一个数组，这个数组的结构为 <code>[["chunk的名字"], { "chunk的路径": function(){ chunk的内容定义 }}]</code> 。</p><p>回到 <code>index.bundle.js</code> 中我们可以找到关于 <code>window.webpackJsonp</code> 的相关定义及使用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> jsonpArray <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储旧的 jsonpArray.push 方法</span><span class="token keyword">var</span> oldJsonpFunction <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用 webpackJsonpCallback 覆盖 jsonpArray.push 方法</span>jsonpArray<span class="token punctuation">.</span>push <span class="token operator">=</span> webpackJsonpCallback<span class="token punctuation">;</span>jsonpArray <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 依次调用 webpackJsonpCallback</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> jsonpArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 缓存上一次的jsonpArray.push方法，形成链条，将模块共享挂载，起到缓存的作用。</span><span class="token keyword">var</span> parentJsonpFunction <span class="token operator">=</span> oldJsonpFunction<span class="token punctuation">;</span></code></pre><p>这里用 <code>webpackJsonpCallback</code> 覆盖了 <code>window.webpackJson</code> 的 <code>push</code> 方法，也就是说，在 <code>foo.bundle.js</code> 中其实是调用了 <code>webpackJsonpCallback</code> 方法。</p><p>那么，这个 <code>webpackJsonpCallback</code> 方法究竟又做了什么呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> chunkIds <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应加载的chunk的名称的数组</span>  <span class="token keyword">var</span> moreModules <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应加载的chunk的路径和chunk定义组成的对象</span>  <span class="token keyword">var</span> moduleId<span class="token punctuation">,</span>    chunkId<span class="token punctuation">,</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    resolves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator"><</span> chunkIds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    chunkId <span class="token operator">=</span> chunkIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span> <span class="token operator">&&</span>      installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      resolves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 收集所有的resolve</span>    <span class="token punctuation">}</span>    installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标识chunk加载完毕</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 让modules中包含同步和异步加载的所有模块</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>moduleId <span class="token keyword">in</span> moreModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>moreModules<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> moreModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将异步加载的chunk添加到 modules 对象中</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentJsonpFunction<span class="token punctuation">)</span> <span class="token function">parentJsonpFunction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>resolves<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    resolves<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 依次执行resolve，将所有的promise变为完成态</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据代码内容分析，该方法</p><ul><li>首先，判断异步加载的 chunk 是否已经完成加载，如果还在加载中就收集所有 <code>promise</code> 的 <code>resolve</code>方法，接着在 <code>installedChunks</code> 对象中标记 chunk 为加载完成状态</li><li>然后，再把这些 chunk 都添加到 <code>modules</code> 对象中，这样就可通过 <code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 来同步加载 chunk，也就是 <code>foo.bundle.js</code> 中第一个 <code>then</code> 执行的内容，传入模块的路径，使用 <code>__webpack_require__</code> 进行同步加载。</li><li>最后，依次执行收集的 <code>promise</code> 的 <code>resolve</code> 回调，将所有的 <code>promise</code> 变为完成态。</li></ul><p>到此，异步加载原理我们就有了一个基本的了解了。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>源码中还有部分的方法因为没有用到，所以没有做具体的分析。其中 <code>__webpack_require__.t</code> 这个方法很有必要提一下。</p><p>这个方法会在异步加载中用到，比如，<code>foo.js</code> 是 CommonJS 规范的内容。</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><p>这个时候打包出来的入口文件中就可以看到 <code>__webpack_require__.t</code> 的身影。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __webpack_require__      <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"./src/foo.js"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法传入模块的路径，以及一个数字 <code>7</code>，作用当然也是为了加载模块内容。但它和 <code>__webpack_require__</code> 相比究竟有什么区别呢？</p><pre class=" language-javascript"><code class="language-javascript">__webpack_require__<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">1</span><span class="token punctuation">)</span> value <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">4</span> <span class="token operator">&&</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&&</span> value <span class="token operator">&&</span> value<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个命名空间对象</span>  <span class="token keyword">var</span> ns <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将ns对象标识为 ES 模块</span>  __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 给ns对象定义default属性，值为传入的value</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">2</span> <span class="token operator">&&</span> <span class="token keyword">typeof</span> value <span class="token operator">!=</span> <span class="token string">"string"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span>      __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>        ns<span class="token punctuation">,</span>        key<span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ns<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>分析源码可以发现，该方法最终返回一个命名空间对象，接收的第二个参数是个数字，它接下来与 1，2，4，8 进行了按位与操作。想必你已经很快联想到了二进制吧，没错，这几个数字正是对应 0b0001、0b0010、0b0100、0b1000 这几个二进制数。为什么要用数字呢？当然是为了提高运算比较的效率。</p><p>回到正题，该方法通过传入的第二个参数进行了以下处理。</p><ul><li><p>当 <code>mode & 1</code> 为<code>true</code>，表示传入的<code>value</code>是一个模块 id，需要使用 <code>__webpack_require__</code>来加载模块内容</p></li><li><p>当 <code>mode & 2</code> 为<code>true</code>，首先构造了一个 <code>ns</code> 的命名空间对象，将该对象传入 <code>__webpack_require__.r</code> 方法中，被标识为一个 ES Module （即拥有<code>__esModule</code>属性）。接着定义 <code>ns</code> 对象的 <code>default</code> 属性，并将传入的 <code>value</code> 挂上去作为该对象的值。然后遍历传入的 <code>value</code>，将它的属性和值都拷贝定义到 <code>ns</code> 上</p></li><li><p>当 <code>mode & 4</code> 为<code>true</code>，并且传入的 <code>value</code> 是个对象且拥有<code>__esModule</code>属性（表示已经是或者已经被包装为 ES Module 了），则直接返回这个 <code>value</code> 对象</p></li><li><p>当 <code>mode & 8</code> 为<code>true</code>，其行为等同于 <code>require</code>，直接返回 <code>value</code> 即可</p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>简单总结一下，为了减少打包的体积，去掉非必要资源加载的浪费，我们需要异步加载方案来优化资源的加载。简单说，就是在需要用到某个文件的时候，通过 <code>import()</code> 引入这个文件，在返回的 <code>promise</code> 的 <code>then</code> 中去获取文件内容，以达到动态加载的目的。当然，这并不是唯一的方法，<code>webpack</code> 还提供了代码分割方案，也可以达到加载优化的效果。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt;上一篇&lt;a href=&quot;/article/webpack-bundle-analyse-0/&quot;&gt;webpack 打包文件分析（上）&lt;/a&gt;我们讲到 &lt;code&gt;webpack&lt;/code&gt; 打包源码中文件加载的部分，通过分析了解了在 &lt;code&gt;webpack&lt;/code&gt; 中不同模块规范相互加载的处理。而至此，只包括了文件的&lt;strong&gt;同步加载&lt;/strong&gt;分析，对于文件的异步加载又是如何处理的呢？&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;webpack&lt;/code&gt; 将项目打包为一个 &lt;code&gt;bundle.js&lt;/code&gt; 文件，通过 &lt;code&gt;script&lt;/code&gt; 标签插入到页面中引用。但如果这个 &lt;code&gt;bundle.js&lt;/code&gt; 体积特别大，就会导致我们加载时间过长，阻塞页面的渲染。&lt;/p&gt;
&lt;p&gt;其次，这个打包出来的 &lt;code&gt;bundle.js&lt;/code&gt; 中其实部分的代码资源是当前加载页面用不到的，这样也导致了浪费。于是，资源加载的优化就成了必须要考虑的问题，而异步加载（或者说动态加载）就是解决这个问题的方案之一。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="webpack" scheme="https://fcc-cd.dev/tags/webpack/"/>
    
      <category term="bundle" scheme="https://fcc-cd.dev/tags/bundle/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题@组合总和</title>
    <link href="https://fcc-cd.dev/article/algorithm/combined-sum/"/>
    <id>https://fcc-cd.dev/article/algorithm/combined-sum/</id>
    <published>2020-05-20T16:00:00.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌~</p><p>这次让我们回到算法本身，来探讨一下回溯算法：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=243225187&bvid=BV1se411W7T4&cid=193228326&page=1"></iframe><h2 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/" target="_blank" rel="noopener">力扣 ​leetcode-cn.com</a></p><p>给定一个<strong>无重复元素</strong>的数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的数字可以无限制重复被选取。</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>所有数字（包括 <code>target</code>）都是正整数。</p><p>解集不能包含重复的组合。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class=" language-text"><code class="language-text">输入: candidates = [2,3,6,7], target = 7,所求解集为:[  [7],  [2,2,3]]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class=" language-text"><code class="language-text">输入: candidates = [2,3,5], target = 8,所求解集为:[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这道题来说，最困难的点就在于「<code>candidates</code> 中的数字可以无限制重复被选取」, 这个条件导致了最后结果的集合里面可以选的元素的<strong>数量不一定</strong>，直接导致了满足条件的<strong>可能性组合</strong>的数量暴增，给程序的复杂性带来了一定的挑战。</p><p>面对这种情况，我们就不得不尝试组合出各种能容纳<strong>最多元素</strong>的组合。在学习算法的过程中，可以理解到，类似面临这种 <strong>「查找最远路径」</strong>的问题，最适合的算法场景就是 <strong>「深度优先」</strong>搜索算法。</p><p>回到这个题目当中，我们想要找出所有满足条件的组合，就是要 <strong>「从长到短」、「从小到大」</strong>尝试所有相加不超过 <code>target</code> 的组合。而在如果遇到组合超过 <code>target</code> 的情况，则回到更 <strong>「短」</strong>一点的组合尝试其他可能性：</p><p>以这道题目的 <strong>示例 2</strong> 为例：</p><p><img src="https://pic2.zhimg.com/80/v2-1212bd81293af4adc17fa76ff0c6af61_1440w.jpg" alt></p><p>如图所示，我们从左往右，每次尝试去取到<strong>最多</strong>元素的可能性，当组合的和大于或等于 <code>target</code> 的时候（等于的时候要记录结果），就返回上一层，尝试新的组合（新的组合的数要比之前的大）。相当于在这里 <strong>「剪掉」</strong>了后面的可能性，并 <strong>「返回」</strong>了上一层去尝试。因此这种算法也被称为了 <strong>「回溯剪枝算法」</strong>。提一下，<strong>「回溯剪枝算法」</strong>其实就是一种 <strong>「深度优先查找」(DFS)</strong> 算法。</p><p><strong>注意</strong>：对于这个题来说，这个算法必须在<strong>有序数组</strong>中才可以才行，因为数值越大，深度就越有限。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>了解了思路，我们先来看看 Helen 的解法</p><pre class=" language-JavaScript"><code class="language-JavaScript">/** * @param {number[]} candidates * @param {number} target * @return {number[][]} */function combinationSum(candidates, target) {    const result = [];    let tmpPath = [], start = 0;    candidates = candidates.sort((a, b) => a - b);    function backtrack(tmpPath, target, start) {        if (target === 0) {            result.push(tmpPath);            return;        }        for (let index = start; index < candidates.length; index++) {            if (target < 0) break;            tmpPath.push(candidates[index]);            backtrack(tmpPath.slice(), target - candidates[index], index);            tmpPath.pop();     //回溯        }    }    backtrack(tmpPath, target, start);    return result;}</code></pre><p>在这里，Helen 定义了一个 <code>backtrack</code> 的回溯函数，在其中遍历了 <code>candidates</code> 数组，并在其中递归地又去回溯，从而找出所有的可能性。</p><p>注意其中 <code>target < 0</code> 这个条件，其实就是一个“剪枝”，把超出的可能性剪掉。只不过用了减法的形式，有点反直觉，可以多琢磨下。</p><p>而书香稍微改了下结构，把代码缩短了点：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function combinationSum(candidates, target) {  const sliceArr = candidates      .filter(item => item <= target)      .sort((a, b) => a - b),    finalArr = [];  function findCompose(target, offset, last) {    for (let i = offset; i < sliceArr.length; i++) {      const subTarget = target - sliceArr[i];      if (subTarget == 0) finalArr.push([...last, sliceArr[i]]);      if (subTarget > 0) findCompose(subTarget, i, [...last, sliceArr[i]]);    }  }  findCompose(target, 0, []);  return finalArr;}</code></pre><p>其实差不太多，不过是因为用了 ES 6 数组的解构赋值方法，没有把每个分支都 <code>push</code> 进去，所以回溯的时候就可以少写一个 <code>pop</code> 啦~</p><h2 id="曾大师-Go-语言时间"><a href="#曾大师-Go-语言时间" class="headerlink" title="曾大师 Go 语言时间"></a>曾大师 Go 语言时间</h2><p>他在注释里顺便给我们解释了 <strong>「示例 1」</strong>，并且直接将函数命名成了 <code>DFS</code>（深度优先搜索）。果然很有算法大师的风范呀！</p><pre class=" language-Go"><code class="language-Go">// 深度搜索加减枝,具体过程如下// 2 -> 22 -> 222 -> 2222 -> 223(合适) -> 23 -> 233 -> 26 -> 3 -> 33 -> 333 -> 36 -> 6 -> 66 ->7(合适)var result [][]intvar currCandidate []intfunc combinationSum(candidates []int, target int) [][]int {    sort.Ints(candidates)    result=make([][]int,0)    currCandidate=make([]int,0)    DFS(target,candidates)    return result}func DFS(target int,candidates []int) int {    if getSum(currCandidate) == target {        temCandidate := make([]int, len(currCandidate))        copy(temCandidate, currCandidate)        result = append(result, temCandidate)        return 0    } else if getSum(currCandidate) > target {        return -1    } else { //主要看这里用0代表相同，-1代表已经超过了当前target，1则表示还能继续加        for i := 0; i < len(candidates); i++ {            currCandidate = append(currCandidate, candidates[i])            temp := DFS(target, candidates[i:])            currCandidate = currCandidate[:len(currCandidate) - 1]            if temp <= 0 {                break            }        }    }    return 1}func getSum(nums []int) int {    sum := 0    for i := 0; i < len(nums); i++ {        sum += nums[i]    }    return sum}</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>OK，这样看下来，其实算法离我们也没有那么远。事实上如此，算法本身也是为了解决<strong>具体的问题</strong>而诞生的。而我们在练习的过程中，要理解到算法具体解决了什么问题，就可以在遇到类似的问题的时候迎刃而解啦~</p><p>下周见~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌~&lt;/p&gt;
&lt;p&gt;这次让我们回到算法本身，来探讨一下回溯算法：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=243225187&amp;bvid=BV1se411W7T4&amp;cid=193228326&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;组合总和&quot;&gt;&lt;a href=&quot;#组合总和&quot; class=&quot;headerlink&quot; title=&quot;组合总和&quot;&gt;&lt;/a&gt;组合总和&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣 ​leetcode-cn.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个&lt;strong&gt;无重复元素&lt;/strong&gt;的数组 &lt;code&gt;candidates&lt;/code&gt; 和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中所有可以使数字和为 &lt;code&gt;target&lt;/code&gt; 的组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的数字可以无限制重复被选取。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 打包文件分析（上）</title>
    <link href="https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-0/"/>
    <id>https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-0/</id>
    <published>2020-05-16T16:00:00.000Z</published>
    <updated>2020-05-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>webpack 是一个用于静态资源打包的工具。它分析你的项目结构，会递归的构建依赖关系，找到其中脚本、图片、样式等将其转换和打包输出为浏览器能识别的资源。</p><p>本篇文章仅对 webpack 打包输出的文件进行简要的分析。</p><a id="more"></a><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p><a href="https://github.com/zhangyanling77/learn-webpack" target="_blank" rel="noopener">项目地址</a></p><p>看一下几个关键文件：</p><ul><li>依赖文件 <code>src/foo.js</code></li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">module.exports = 'foo';</code></pre><ul><li>入口文件 <code>src/index.js</code></li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">const foo = require('./foo.js');console.log(foo)</code></pre><ul><li>webpack 配置文件 <code>webpack.config.js</code></li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">const path = require('path');module.exports = {  mode: 'development', // 标识不同的环境，development 开发 | production 生产  devtool: 'none', // 不生成 source map 文件  entry: './src/index.js', // 文件入口  output: {    path: path.resolve(__dirname, 'dist'), // 输出目录    filename: 'bundle.js', // 输出文件名称  }}</code></pre><h2 id="bundle-分析"><a href="#bundle-分析" class="headerlink" title="bundle 分析"></a>bundle 分析</h2><p>首先放上打包输出文件 <code>dist/bundle.js</code></p><pre class=" language-JavaScript"><code class="language-JavaScript">(function(modules) {  // 模块缓存对象  var installedModules = {};  function __webpack_require__(moduleId) {    if(installedModules[moduleId]) {      return installedModules[moduleId].exports;    }    // 创建一个新的模块对象    var module = installedModules[moduleId] = {      i: moduleId, // 模块id，即模块所在的路径      l: false, // 该模块是否已经加载过了      exports: {} // 导出对象    };    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);    // 标识模块已经加载过了    module.l = true;    return module.exports;  }  // 该属性用于公开modules对象 (__webpack_modules__)  __webpack_require__.m = modules;  // 该属性用于公开模块缓存对象  __webpack_require__.c = installedModules;  // 该属性用于定义兼容各种模块规范输出的getter函数，d即Object.defineProperty  __webpack_require__.d = function(exports, name, getter) {    if(!__webpack_require__.o(exports, name)) {      Object.defineProperty(exports, name, { enumerable: true, get: getter });    }  };  // 该属性用于在导出对象exports上定义 __esModule = true，表示该模块是一个 ES 6 模块  __webpack_require__.r = function(exports) {    // 定义这种模块的Symbol.toStringTag为 [object Module]    if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {      Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });    }    Object.defineProperty(exports, '__esModule', { value: true });  };  // 创建一个命名空间对象  // mode & 1: 传入的value为模块id，使用__webpack_require__加载该模块  // mode & 2: 将传入的value的所有的属性都合并到ns对象上  // mode & 4: 当ns对象已经存在时，直接返回value。表示该模块已经被包装过了  // mode & 8|1: 行为类似于require  __webpack_require__.t = function(value, mode) {    if(mode & 1) value = __webpack_require__(value);    if(mode & 8) return value;    if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;    // 创建一个命名空间对象    var ns = Object.create(null);    // 将ns对象标识为es模块    __webpack_require__.r(ns);    // 给ns对象定义default属性，值为传入的value    Object.defineProperty(ns, 'default', { enumerable: true, value: value });    if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));    return ns;  };  // 获取模块的默认导出对象，这里区分 CommonJS 和 ES module 两种方式  __webpack_require__.n = function(module) {    var getter = module && module.__esModule ?      function getDefault() { return module['default']; } :      function getModuleExports() { return module; };    __webpack_require__.d(getter, 'a', getter);    return getter;  };  // 该属性用于判断对象自身属性中是否具有指定的属性，o即Object.prototype.hasOwnProperty  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };  // 该属性用于存放公共访问路径，默认为'' (__webpack_public_path__)  __webpack_require__.p = "";  // 加载入口模块并返回模块的导出对象  return __webpack_require__(__webpack_require__.s = "./src/index.js");})({  "./src/foo.js":  (function(module, exports) {    module.exports = 'foo';  }),  "./src/index.js":  (function(module, exports, __webpack_require__) {    const foo = __webpack_require__("./src/foo.js");    console.log(foo)  })});</code></pre><p>根据上面的源码可以看出，最终打包出的是一个自执行函数。</p><p>首先，这个自执行函数它接收一个参数 <code>modules</code>，<code>modules</code>为一个对象，其中 <code>key</code> 为打包的模块文件的路径，对应的 <code>value</code> 为一个函数，其内部为模块文件定义的内容。</p><p>然后，我们再来看一看自执行函数的函数体部分。函数体返回 <code>__webpack_require__(__webpack_require__.s = "./src/index.js")</code> 这段代码，此处为加载入口模块并返回模块的导出对象。</p><p>可以发现，webpack 自己实现了一套加载机制，即 <code>__webpack_require__</code>，可以在浏览器中使用。该方法接收一个 <code>moduleId</code>，返回当前模块的导出对象。</p><h3 id="webpack-文件加载-webpack-require"><a href="#webpack-文件加载-webpack-require" class="headerlink" title="webpack 文件加载 (__webpack_require__)"></a>webpack 文件加载 (__webpack_require__)</h3><pre class=" language-JavaScript"><code class="language-JavaScript">  var installedModules = {};  function __webpack_require__(moduleId) {    if(installedModules[moduleId]) {      return installedModules[moduleId].exports;    }    var module = installedModules[moduleId] = {      i: moduleId,      l: false,      exports: {}    };    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);    module.l = true;    return module.exports;  }  // ...</code></pre><p>首先，当前作用域顶端声明了 <code>installedModules</code> 这个对象，它用于缓存加载过的模块。在 <code>__webpack_require__</code> 方法内部，会对于传入的 <code>moduleId</code> 在缓存对象中查找对应的模块是否存在，如果已经存在，返回该模块对象的导出对象；否则，创建一个新的模块对象，记录当前模块 id、标识模块是否加载过、以及定义导出对象，同时将它放到缓存对象中。</p><p>接下来就是重要的一步，执行模块的函数内容，传入 <code>module</code>、<code>module.exports</code> 及 <code>__webpack_require__</code> 作为参数。</p><pre class=" language-JavaScript"><code class="language-JavaScript">modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</code></pre><p>也就是去执行自执行函数传入的 <code>modules</code> 对象中当前 <code>moduleId</code> 对应的函数。接着将该模块标识为已经加载的状态，最后返回当前模块的导出对象。此时便完成了模块的加载任务。</p><p>接着，再来看看传入的 <code>modules</code> 对象部分。</p><pre class=" language-JavaScript"><code class="language-JavaScript">({  "./src/foo.js":  (function(module, exports) {    module.exports = 'foo';  }),  "./src/index.js":  (function(module, exports, __webpack_require__) {    const foo = __webpack_require__("./src/foo.js");    console.log(foo)  })})</code></pre><p>观察函数体内容，可以看到对于依赖模块 <code>foo.js</code> 而言，函数体内即为 <code>foo.js</code> 文件中的定义内容。而对于入口模块 <code>index.js</code>，则需要执行 <code>__webpack_require__</code> 方法将依赖的文件加载进来使用。</p><p>那么，到此为止，我们已经明白了 webpack 加载模块的基本原理。但细心的你一定发现了，我们的文件导入导出遵循的是 CommonJS 规范，而 webpack 是基于 Node.js 实现的，所以在文件加载部分并没有特别的处理。因此，这里我们来看看不同模块规范相互加载时，webpack 是如何处理的。</p><p><strong>harmony（和谐，即对于不同模块规范加载的一个兼容处理）</strong></p><ul><li>CommonJS 加载 CommonJS</li></ul><p>这种方式即我们上面示例的加载方式，就不做赘述了。</p><h4 id="CommonJS-加载-ES-module"><a href="#CommonJS-加载-ES-module" class="headerlink" title="CommonJS 加载 ES module"></a>CommonJS 加载 ES module</h4><p>src/foo.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">export default 'foo';</code></pre><p>src/index.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">const foo = require('./foo.js');console.log(foo)</code></pre><p>dist/bundle.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">({  "./src/foo.js":  (function(module, __webpack_exports__, __webpack_require__) {    __webpack_require__.r(__webpack_exports__);    __webpack_exports__["default"] = ('foo');  }),  "./src/index.js":  (function(module, exports, __webpack_require__) {    const foo = __webpack_require__("./src/foo.js");    console.log(foo)  })})</code></pre><p>由打包后的源码可以发现，当 <code>foo.js</code> 使用 ES module 方式导出，与之前的相比，多了 <code>__webpack_require__.r(__webpack_exports__)</code>这段代码，<code>__webpack_exports__</code> 很好理解，即模块的导出对象。那么，<code>__webpack_require__.r</code> 方法是干嘛的呢？</p><pre class=" language-JavaScript"><code class="language-JavaScript">// ...__webpack_require__.r = function(exports) {  if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {    Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });  }  Object.defineProperty(exports, '__esModule', { value: true });};// ...</code></pre><p>根据其实现可知，该方法将传入的对象标识上 <code>__esModule=true</code>，即表明该模块为 ES 6 模块。同时定义该对象的 <code>Symbol.toStringTag</code> 为 <code>Module</code>，即当使用 <code>Object.prototype.toString.call</code> 时将返回 <code>[object Module]</code>。</p><p>最后，将模块的内容挂在 <code>__webpack_exports__</code> 的 <code>default</code> 属性上。</p><h4 id="ES-module-加载-ES-module"><a href="#ES-module-加载-ES-module" class="headerlink" title="ES module 加载 ES module"></a>ES module 加载 ES module</h4><p>src/foo.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">export default 'foo';</code></pre><p>src/index.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">import foo from './foo.js';console.log(foo)</code></pre><p>dist/bundle.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">({  "./src/foo.js":  (function(module, __webpack_exports__, __webpack_require__) {    __webpack_require__.r(__webpack_exports__);    __webpack_exports__["default"] = ('foo');  }),  "./src/index.js":  (function(module, __webpack_exports__, __webpack_require__) {    __webpack_require__.r(__webpack_exports__);    var _foo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/foo.js");    console.log(_foo_js__WEBPACK_IMPORTED_MODULE_0__["default"])  })})</code></pre><p>当入口文件 <code>index.js</code> 和依赖文件 <code>foo.js</code> 都遵循 ES module 的方式时，可以发现在 <code>index.js</code> 中，对于获取导出对象的方式也有所不同。<code>_foo_js__WEBPACK_IMPORTED_MODULE_0__</code> 用来接收导入的文件，并通过 <code>default</code> 属性获取到文件的默认导出内容。</p><p>那么，是如何实现这种方式的呢？</p><pre class=" language-JavaScript"><code class="language-JavaScript">// ...__webpack_require__.d = function(exports, name, getter) {  if(!__webpack_require__.o(exports, name)) {    Object.defineProperty(exports, name, { enumerable: true, get: getter });  }};// ...__webpack_require__.n = function(module) {  var getter = module && module.__esModule ?    function getDefault() { return module['default']; } :    function getModuleExports() { return module; };  __webpack_require__.d(getter, 'a', getter);  return getter;};__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };// ...</code></pre><p>分析这几个方法可以发现，<code>__webpack_require__.o</code> 其实就是 <code>Object.prototype.hasOwnProperty</code> 的一个重写，用于判断对象自身属性中是否具有指定的属性。而 <code>__webpack_require__.d</code> 即 <code>Object.defineProperty</code>，这里用于定义兼容各种模块规范输出的 getter 函数。<code>__webpack_require__.n</code> 则是用于获取模块的默认导出对象，兼容 CommonJS 和 ES module 两种方式。</p><h4 id="ES-module-加载-CommonJS"><a href="#ES-module-加载-CommonJS" class="headerlink" title="ES module 加载 CommonJS"></a>ES module 加载 CommonJS</h4><p>src/foo.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">module.exports = 'foo';</code></pre><p>src/index.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">import foo from './foo.js';console.log(foo)</code></pre><p>dist/bundle.js</p><pre class=" language-JavaScript"><code class="language-JavaScript">({  "./src/foo.js":  (function(module, exports) {    module.exports = 'foo';  }),  "./src/index.js":  (function(module, __webpack_exports__, __webpack_require__) {    __webpack_require__.r(__webpack_exports__);    var _foo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/foo.js");    var _foo_js__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_foo_js__WEBPACK_IMPORTED_MODULE_0__);    console.log(_foo_js__WEBPACK_IMPORTED_MODULE_0___default.a)  })})</code></pre><p>当入口文件 <code>index.js</code> 以 ES module 的方式加载遵循 CommonJS 规范的 <code>foo.js</code> 时，通过 <code>__webpack_require__</code> 加载传入的模块，将得到的模块 <code>_foo_js__WEBPACK_IMPORTED_MODULE_0__</code> 再传入 <code>__webpack_require__.n</code> 方法获取到该模块的默认导出对象。因为 <code>foo.js</code> 中的内容是通过 <code>export</code> 导出，而非 <code>export default</code> 导出。因此 <code>foo</code> 被挂在了 <code>default</code> 的一个 <code>a</code> 属性上。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>webpack 对于不同模块规范的相互加载的处理，我们已经有了基本的了解。但此时我们的文件加载都是同步的，那么文件的异步加载又是怎么样的呢？</p><p>请听下回分解。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;webpack 是一个用于静态资源打包的工具。它分析你的项目结构，会递归的构建依赖关系，找到其中脚本、图片、样式等将其转换和打包输出为浏览器能识别的资源。&lt;/p&gt;
&lt;p&gt;本篇文章仅对 webpack 打包输出的文件进行简要的分析。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="webpack" scheme="https://fcc-cd.dev/tags/webpack/"/>
    
      <category term="bundle" scheme="https://fcc-cd.dev/tags/bundle/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】匹配子序列的单词数</title>
    <link href="https://fcc-cd.dev/article/algorithm/number-of-words-matching-subsequence/"/>
    <id>https://fcc-cd.dev/article/algorithm/number-of-words-matching-subsequence/</id>
    <published>2020-05-10T16:00:00.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌~</p><p>这次让我们换换口味，讨论一个稍微偏实际一点的问题：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=925667742&bvid=BV1bT4y1u7Vy&cid=189923369&page=1"></iframe><a id="more"></a><h2 id="匹配子序列的单词数"><a href="#匹配子序列的单词数" class="headerlink" title="匹配子序列的单词数"></a>匹配子序列的单词数</h2><p><a href="https://leetcode-cn.com/problems/number-of-matching-subsequences/" target="_blank" rel="noopener">力扣 ​leetcode-cn.com</a></p><p>给定字符串 S 和单词字典 words, 求 words[i] 中是 S 的子序列的单词个数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-text"><code class="language-text">输入:S = "abcde"words = ["a", "bb", "acd", "ace"]输出: 3解释: 有三个是 S 的子序列的单词: "a", "acd", "ace"。</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>所有在 words 和 S 里的单词都只由小写字母组成。</p><p>S 的长度在 [1, 50000]。</p><p>words 的长度在 [1, 5000]。</p><p>words[i] 的长度在 [1, 50]。</p><h2 id="暴力破解法"><a href="#暴力破解法" class="headerlink" title="暴力破解法"></a>暴力破解法</h2><p>这周的题目相对简单。从题意上来理解，无非就是 <code>words</code> 数组中每一个单词拿到 <code>S</code> 字符串中去尝试匹配就好。稍微值得注意的是，因为匹配的规则在于<strong>不一定是连续子字符串匹配</strong>，因此需要考虑<strong>每个字母</strong>在其中是否<strong>全部都</strong>存在，Helen 给出了暴力解法：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function numMatchingSubseq(S, words) {    let count = 0;    for (const word of words) {        let index = -1, _count = 0;        for (const str of word) {            _count++;            const _index = S.indexOf(str, index + 1);            if (_index === -1)                break;            else                index = _index;            if (_count === word.length)                count++;        }    }    return count;}</code></pre><p>书香在同样的思路上，利用 JS 的自带 API ，稍微做了一些<strong>写法上的优化</strong>，让程序看起来更简短了一些：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function numMatchingSubseq(S, words) {    const isSubWord = function (s, word) {        let pos = -1;        for (let i = 0; i < word.length; i++) {            pos = s.indexOf(word[i], pos + 1);            if (pos == -1) return 0;        }        return 1;    };    return words.reduce((count, word) => count + isSubWord(S, word), 0)}</code></pre><p>你看出了其中的相同之处了吗？</p><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><p>既然是字串匹配，自然可以通过正则表达式来完成匹配。书香尝试了这一解法：</p><pre class=" language-JavaScript"><code class="language-JavaScript"> function numMatchingSubseq(S, words) {    return words.reduce((count, word) => {        const testReg = new RegExp(word.split('').join('\w*'));        if(testReg.test(S)) count++;        return count;    },0)};</code></pre><p>但是，<strong>正则匹配</strong>花费的计算资源会<strong>更高</strong>一些，因此这个解法在题目中的<strong>超长字串</strong>测试用例中，因为超出时间限制而失败了…… 在这里贴出这段代码，仅作为一种思路的参考。</p><h2 id="可不可以不那么暴力？"><a href="#可不可以不那么暴力？" class="headerlink" title="可不可以不那么暴力？"></a>可不可以不那么暴力？</h2><p>Helen 作为三人行里唯一的女生，自然忍不了动不动就 <strong>「暴力破解」</strong>的做法 ‍♀️。因此她换了一个不那么暴力的思路，通过将 <code>words</code> 中的单词按照<strong>首字母</strong>先排序到一个 <strong>「桶」</strong>中，将数据进行了<strong>预处理</strong>，然后在字符串匹配其中字符的的时候，就可以从对应的地方匹配了：</p><pre class=" language-JavaScript"><code class="language-JavaScript">  function numMatchingSubseq(S, words) {    const bucket = Array.from({ length: 26 }, () => []);    let count = 0;    for (const word of words)        bucket[word.charCodeAt(0) - 97].push(word); // a 的 Unicode 是 97    for (const str of S) {        const list = bucket[str.charCodeAt(0) - 97];        bucket[str.charCodeAt(0) - 97] = [];        for (let word of list)            if (word.length > 1) {                word = word.slice(1);                if (word) bucket[word.charCodeAt(0) - 97].push(word);            } else                count++;    }    return count;};</code></pre><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>曾大师的 Go 语言时光，他似乎也很暴力……</p><pre class=" language-Go"><code class="language-Go">func numMatchingSubseq(S string, words []string) int {    count := 0    for i := 0; i < len(words); i++ {        stat := 0        word := words[i]        if len(word) > len(S) {            continue        } else {            for i := 0; i < len(S); i++ {                if word[stat] == S[i] {                    stat++                    if stat == len(word) {                        count++                        break                    }                }            }        }    }    return count}</code></pre><p><img src="https://pic3.zhimg.com/80/v2-324d4980593113295435a6ab95218f1e_1440w.jpg" alt></p><p>这一次他的时间消耗就没有那么好了，你能看出相比其前面 JS 的两个暴力解法，这次他为什么「失手」了吗？</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>在这次题目中，三人行不约而同采用了「暴力解法」，并且在<strong>一定程度</strong>的简单优化上，时间和空间的利用成绩都还不错。事实在，在写代码的过程中，往往也是一个迭代的过程，前期<strong>过度地优化</strong>有时候反而不如先利用最直观的方式把程序先跑起来，再根据<strong>需求和场景条件</strong>来进行对应的优化更好。</p><p>下周见啦~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌~&lt;/p&gt;
&lt;p&gt;这次让我们换换口味，讨论一个稍微偏实际一点的问题：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=925667742&amp;bvid=BV1bT4y1u7Vy&amp;cid=189923369&amp;page=1&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>【青铜三人行】二叉树中的最大路径和</title>
    <link href="https://fcc-cd.dev/article/algorithm/max-path-sum-of-binary-tree/"/>
    <id>https://fcc-cd.dev/article/algorithm/max-path-sum-of-binary-tree/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌~ 这一次，青铜三人行决定在五一假期期间挑战一道难度为「困难」的题目：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=285596520&bvid=BV1yf4y1m7Le&cid=187460008&page=1"></iframe><a id="more"></a><h2 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a>二叉树中的最大路径和</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">力扣 ​leetcode-cn.com</a></p><p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径<strong>至少包含一个</strong>节点，且不一定经过根节点。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class=" language-text"><code class="language-text">输入：[1, 2, 3]       1      / \     2   3输出：6</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class=" language-text"><code class="language-text">输入：[-10, 9, 20, null, null, 15, 7]   -10   / \  9  20    /  \   15   7输出: 42</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为这次题目相对来说比较困难，因此就以一种思路来说明。</p><p>这道题的难点在于，题目中要求取的“任意节点出发”的路径，且不一定经过根节点。导致在如何迭代求取上，陷入了一个比较复杂的境地。</p><p>为了求解这个问题，我们需要将题目先简化一下，分步骤完成：</p><h3 id="求取某一节点为起始的最大路径和"><a href="#求取某一节点为起始的最大路径和" class="headerlink" title="求取某一节点为起始的最大路径和"></a>求取某一节点为起始的最大路径和</h3><pre class=" language-JavaScript"><code class="language-JavaScript">function maxChildrenPathValue(node) {  if (node == null) return 0;  const leftPathVal = maxChildrenPathValue(node.left),    rightPathVal = maxChildrenPathValue(node.right);  const maxPathValue = Math.max(leftPathVal, rightPathVal) + node.val;  return Math.max(maxPathValue, 0);}</code></pre><p>在这一步中，我们递归求取了某一个节点为开始的<strong>单边最大路径和</strong>，值得注意的是，如果取出来的值是负值，则设为 0，意为「舍弃」掉这条路径。</p><h3 id="求取经过某一根节点的最大路径和"><a href="#求取经过某一根节点的最大路径和" class="headerlink" title="求取经过某一根节点的最大路径和"></a>求取经过某一根节点的最大路径和</h3><p>完成了上一步，我们就可以求取经过某一特定根节点的最大路径和了，即把「某个节点的值」与「左边最大路径和」和「右边最大路径和」相加：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function getRootMaxPathVal(root) {  const leftMaxPathVal = maxChildrenPathValue(root.left),    rightMaxPathVal = maxChildrenPathValue(root.right);  return leftMaxPathVal + rightMaxPathVal + root.val;}</code></pre><h3 id="遍历求取整颗二叉树的最大路径值"><a href="#遍历求取整颗二叉树的最大路径值" class="headerlink" title="遍历求取整颗二叉树的最大路径值"></a>遍历求取整颗二叉树的最大路径值</h3><p>有了上面的基础，我们就可以遍历整个二叉树，来求取所有节点的最大路径和，并取出其中的最大值来作为整颗二叉树的最大路径和了，在这里我们用了二叉树前序遍历，并使用了一个全局变量 <code>result</code> 来记录最大值：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function preorderTraversal(root) {  if (!root) return;  const value = getRootMaxPathVal(root);  if (value > result) result = value;  preorderTraversal(root.left),  preorderTraversal(root.right);}</code></pre><p>到此我们就可以解出这道题目了，完整代码如下：</p><pre class=" language-JavaScript"><code class="language-JavaScript">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } *//** * @param {TreeNode} root * @return {number} */function maxPathSum(root) {  let result = -Infinity;  function maxChildrenPathValue(node) {    if (node == null) return 0;    const leftPathVal = maxChildrenPathValue(node.left),      rightPathVal = maxChildrenPathValue(node.right);    const maxPathValue = Math.max(leftPathVal, rightPathVal) + node.val;    return Math.max(maxPathValue, 0);  }  function getRootMaxPathVal(root) {    const leftMaxPathVal = maxChildrenPathValue(root.left),      rightMaxPathVal = maxChildrenPathValue(root.right);    return leftMaxPathVal + rightMaxPathVal + root.val;  }  function preorderTraversal(root) {    if (!root) return;    const value = getRootMaxPathVal(root);    if (value > result) result = value;    preorderTraversal(root.left),    preorderTraversal(root.right);  }  preorderTraversal(root);  return result;}</code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>同样的解题思路下，Helen 发现到在<strong>求取某一节点为起始的最大路径和</strong>这一步的时候，已经在对二叉树进行遍历了，那能不能直接在一次递归遍历中解出题目呢？Helen 对代码进行了优化：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function maxPathSum(root) {  let max_sum = -Infinity;  function max_gain(root) {    if (root === null) return 0;    const left_gain = Math.max(max_gain(root.left), 0),      right_gain = Math.max(max_gain(root.right), 0);    const newPath = root.val + left_gain + right_gain;    max_sum = Math.max(newPath, max_sum);    return root.val + Math.max(left_gain, right_gain);  }  max_gain(root);  return max_sum;}</code></pre><p>代码简洁多了，运行也更快了！你有没有发现两个解法的共同之处和不同之处呢？</p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>最后依然是曾大师的 Go 语言 show time~</p><pre class=" language-Go"><code class="language-Go">func maxPathSum(root *TreeNode) int {    var val = INT_MIN();    subMaxPathSum(root, &val);    return val;}func subMaxPathSum(root *TreeNode,val *int) int{    if (root == nil) return 0;    left := subMaxPathSum(root.Left, val);    right := subMaxPathSum(root.Right, val);    threeSub := root.Val + max(0, left) + max(0, right);    twoSub := root.Val + max(0, max(left, right));    *val = max(*val, max(threeSub, twoSub));    return twoSub;}func INT_MIN() int{    const intMax = int(^uint(0) >> 1);    return ^intMax}func max(x, y int) int {    if x < y        return y    return x}</code></pre><p><img src="https://pic3.zhimg.com/v2-1cb2ef07ced0438a01b6bffe9c0ca4ce_b.jpg" alt></p><p>结果依然很惊人啊…… 嗯……</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这次的题目有些复杂，但通过简化题目、拆解步骤，也可以让困难的题目得到解决。而日常编程的过程中，也是在将复杂问题简单化、步骤化的一个过程。最后留个小问题，之前提到过，所有的递归都可以用循环来解决，那么在第一步的递归中，如果用循环解决该怎么做呢？下周见~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌~ 这一次，青铜三人行决定在五一假期期间挑战一道难度为「困难」的题目：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=285596520&amp;bvid=BV1yf4y1m7Le&amp;cid=187460008&amp;page=1&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="二叉树" scheme="https://fcc-cd.dev/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】删除链表的倒数第 N 个节点</title>
    <link href="https://fcc-cd.dev/article/algorithm/remove-nodes-of-linked-lists/"/>
    <id>https://fcc-cd.dev/article/algorithm/remove-nodes-of-linked-lists/</id>
    <published>2020-05-05T11:13:52.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌。这周，「青铜三人行」为你带来了一道关于“链表的题目”。</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=882851982&bvid=BV1nK4y1k75D&cid=180931816&page=1"></iframe><h2 id="删除链表的倒数第-N-个节点"><a href="#删除链表的倒数第-N-个节点" class="headerlink" title="删除链表的倒数第 N 个节点"></a>删除链表的倒数第 N 个节点</h2><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>给定一个链表: 1 -> 2 -> 3 -> 4 -> 5, 和 n = 2；<br>当删除了倒数第二个节点后，链表变为 1 -> 2 -> 3 -> 5。</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>给定的 n 保证是有效的。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>你能尝试使用一趟扫描实现吗？</p><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">力扣 ​ leetcode-cn.com</a></p><a id="more"></a><h2 id="啥是链表"><a href="#啥是链表" class="headerlink" title="啥是链表"></a>啥是链表</h2><p>要完成这道题，首先就得了解一下啥是链表？简单来说，<strong>链表</strong>是一种数据结构，它由一系列离散的<strong>节点</strong>组成。其特点是，每个节点上除了自己的数据以外，还会有一个或两个指针指向下一个或者上一个节点，使得这些节点可以<strong>链</strong>起来。</p><p>其中，只有指向下一个节点的链表称为<strong>单向链表</strong>，它只能从前一个节点到下一个节点一个方向来查找其中的节点数据：</p><p><img src="https://pic4.zhimg.com/80/v2-1cf240bd549d6f37c5cc3526d97fefbb_1440w.png" alt></p><p>而<strong>双向链表</strong>则拥有两个指针，分别指向之前和之后的节点：</p><p><img src="https://pic2.zhimg.com/80/v2-ba4663d586b2181725d053226212c125_1440w.png" alt></p><p>而在 JS 中，这道题目里给我们设定了链表的结构，很明显，是一个单向列表：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="解法一：两次遍历找到对应的节点"><a href="#解法一：两次遍历找到对应的节点" class="headerlink" title="解法一：两次遍历找到对应的节点"></a>解法一：两次遍历找到对应的节点</h2><p>了解了链表的数据结构以后，这道题就不难解决了。不过题目里有个小小的花招，即要求寻找「倒数第 n 个节点」。因为是单向链表，我们没法倒着寻找节点，因此我们很容易想到先找到整个链表的长度，计算出要找的元素的正向位置，然后再从头遍历，进行删除：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> head<span class="token punctuation">,</span>    length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  node <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="解法二：转离散节点为连续节点"><a href="#解法二：转离散节点为连续节点" class="headerlink" title="解法二：转离散节点为连续节点"></a>解法二：转离散节点为连续节点</h2><p>这道题数据量较小，因此运行的速度都比较快。于是向着题目中「只扫描一次」这个进阶目标前进。书香提出了一种方法，既然题目的难点在于链表不容易反向查找，那么把它映射成一个连续的数据结构不就可以解决了吗？于是很自然想到了应用<strong>数组</strong>完成了题目：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> arrNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> length <span class="token operator">=</span> arrNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span> head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token keyword">else</span> arrNodes<span class="token punctuation">[</span>length <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> arrNodes<span class="token punctuation">[</span>length <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arrNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，当需要删除的元素是第一个元素的时候，容易造成数组的越界，需要特殊处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span> head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span></code></pre><h2 id="解法三：双指针法"><a href="#解法三：双指针法" class="headerlink" title="解法三：双指针法"></a>解法三：双指针法</h2><p>上面书香的解法虽然在一次扫描中完成了任务，却额外引入了一个数组的外部结构。有没有更好的办法呢？Helen 和 曾大师对于这个问题，采用了新的办法：题目要求删除倒数第 n 个节点，那么我只需要在我当前扫描到的节点指针之后相隔 n 的节点再设置一个指针，到后一个指针越界的时候，当前节点就是需要删除的节点了：</p><p><img src="https://pic4.zhimg.com/80/v2-54faa5b2a27d7d1ece3ea52a2dcaaa1b_1440w.jpg" alt></p><p>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> l <span class="token operator">=</span> dummy<span class="token punctuation">,</span>    r <span class="token operator">=</span> dummy<span class="token punctuation">,</span>    offset <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>offset<span class="token operator">--</span><span class="token punctuation">)</span> r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  l<span class="token punctuation">.</span>next <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Ertra"><a href="#Ertra" class="headerlink" title="Ertra"></a>Ertra</h2><p>最后，曾大师 go 语言的福利时间又到啦，同样是双指针，你能看出有什么不同吗？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    store <span class="token operator">:=</span> head    i <span class="token operator">:=</span> <span class="token number">0</span>    p <span class="token operator">:=</span> head    <span class="token keyword">for</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            store <span class="token operator">=</span> store<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next        i<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除头节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> store<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    store<span class="token punctuation">.</span>Next <span class="token operator">=</span> store<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next    <span class="token keyword">return</span> head<span class="token punctuation">}</span></code></pre><p>而在时间和空间上，相当惊人，嗯嗯……</p><p><img src="https://pic3.zhimg.com/80/v2-0a19434826b19ed6fa7a451b3671f18e_1440w.jpg" alt></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这周的题目相对来说比较简单，主要是说明了链表的数据结构。链表相对于<strong>数组</strong>来说，更容易<strong>插入、删除</strong>其中的节点，而数组比起来则更容易<strong>查找</strong>到某个节点（想想为什么？）。两个数据结构相辅相成，在不同的应用场景选择合适的数据结构，可以让你的程序运行起来事半功倍哦！</p><p>这次的题目就这样了，欢迎通过 <a href="mailto:bronze_3@163.com">bronze_3@163.com</a> 邮箱联系我们，下周见！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌。这周，「青铜三人行」为你带来了一道关于“链表的题目”。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=882851982&amp;bvid=BV1nK4y1k75D&amp;cid=180931816&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;删除链表的倒数第-N-个节点&quot;&gt;&lt;a href=&quot;#删除链表的倒数第-N-个节点&quot; class=&quot;headerlink&quot; title=&quot;删除链表的倒数第 N 个节点&quot;&gt;&lt;/a&gt;删除链表的倒数第 N 个节点&lt;/h2&gt;&lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个链表: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, 和 n = 2；&lt;br&gt;当删除了倒数第二个节点后，链表变为 1 -&gt; 2 -&gt; 3 -&gt; 5。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;给定的 n 保证是有效的。&lt;/p&gt;
&lt;h3 id=&quot;进阶&quot;&gt;&lt;a href=&quot;#进阶&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;p&gt;你能尝试使用一趟扫描实现吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣 ​ leetcode-cn.com&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
      <category term="链表" scheme="https://fcc-cd.dev/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://fcc-cd.dev/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题@三数之和</title>
    <link href="https://fcc-cd.dev/article/algorithm/three-number-sum-algorithm/"/>
    <id>https://fcc-cd.dev/article/algorithm/three-number-sum-algorithm/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-06-16T16:44:32.806Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>哈喽~ 每周一题，代码无敌。欢迎各位继续观看「<a href="https://zhuanlan.zhihu.com/brozen3" target="_blank" rel="noopener">青铜三人行</a>」的刷题现场。</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=497725505&bvid=BV1AK411j7D9&cid=177264428&page=1"></iframe><p>话不多说，我们进入<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">这周的题目</a>吧：</p><a id="more"></a><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a、b、c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p><em>注意：答案中不可以包含重复的三元组。</em></p><p><em>例如</em></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 给定数组</span><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="最初的解法"><a href="#最初的解法" class="headerlink" title="最初的解法"></a>最初的解法</h2><p>Helen 拿到题目，心想这道题岂不是如同上周的“<strong>两数之和</strong>”一般？无非就是多加了一个数而已。按照思路，首先暴力举出所有满足条件的三个数，再去重即可，写出了如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> threeSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator"><</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator"><</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 转换成字符串方便去重</span>          <span class="token keyword">const</span> strResult <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>拿入测试用例执行，结果正确 😎：</p><p><img src="https://pic4.zhimg.com/80/v2-0be884ded750ba5149622c5ef456ae97_1440w.jpg" alt></p><p>于是提交，结果被现实狠狠打脸……😱：</p><p><img src="https://pic2.zhimg.com/80/v2-7682eca82a75a7957b6568a53bd16acd_1440w.jpg" alt></p><h2 id="排序解法"><a href="#排序解法" class="headerlink" title="排序解法"></a>排序解法</h2><p>纳尼？这道题居然有时间限制…… 太阴险了吧……😵 看样子传统的暴力破解法，在三重循环之下，时间复杂度到达了 O(n³)，时间消耗应该是远远超过了题设。</p><p>看样子想解出这道题，至少要“消灭”掉其中的一重循环。Helen 找来书香一起讨论，两人细细品味题目，发现题目要求：<code>a + b + c == 0</code> ，那说明这三个在数组中的数，除开三个数都为 0 的情况，必然有正有负，有大有小。</p><p>换言之，如果给定一个“最小”的数，我们只需要在比这个数“大”的剩余数组里找出”其他”两个数，看看它们加起来的结果。如果等于 0，则加入结果，如果大于 0，则设法调整“其他两数”，使其和变小。若小于 0，则设法使“其他两数”之和变大。</p><p>而在<strong>有序数组</strong>中，调整两数相加之和的大小是只需要一次循环就可以做到的，如此一来，我们似乎就可以在 O(n²) 的时间复杂度中就可以完成题设了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> threeSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然而在提交时，遇到了一个诡异的测试用例，导致还是超时了 😰：</p><p><img src="https://pic1.zhimg.com/80/v2-a50849a9affc6db152b80958dbcc9e78_1440w.jpg" alt></p><p>居然还有这么奇葩的测试用例！大量的 0 构成的数组。还好这并没有难倒 Helen, 既然题设里要求没有<strong>重复的三元组</strong>，那么加上了一个<strong>跳过重复元素</strong>的条件就好了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> threeSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>提交，代码终于顺利通过啦 😆：</p><p><img src="https://pic1.zhimg.com/80/v2-ca8c3c3855741796038d90e409890720_1440w.jpg" alt></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>看到解题终于通过，大家欢欣鼓舞，也打开了更多的思路。书香发现，既然要相加等于 0，那么除开<strong>全为 0</strong>的情况，必然结果里<strong>有正有负</strong>。换言之，第一层循环选取的数字，只需要遍历“<strong>非正数</strong>”的部分就好，于是加了个条件尝试了一番：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> threeSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>而 Helen 则从“<strong>去重</strong>”这一部分上进行了优化，节省了转化成字符串，再用 <code>Set</code> 等数据结构去重带来的额外开销：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> threeSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>        rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex <span class="token operator">&&</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span> <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>lIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          lIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rIndex <span class="token operator">></span> lIndex <span class="token operator">&&</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span> <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>rIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          rIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>而优化之后的结果也是相当理想：</p><p><img src="https://pic1.zhimg.com/80/v2-03686f83024d4048bd039f07865fc378_1440w.jpg" alt></p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>最后，我们照例贴上曾大师的 Go 语言代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> keyCountMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment" spellcheck="true">/*创建集合 */</span>    keyCountMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        count<span class="token punctuation">,</span> ok <span class="token operator">:=</span> keyCountMap <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> ok <span class="token punctuation">{</span>            keyCountMap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             keyCountMap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    newNums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>keyCountMap<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> keyi <span class="token operator">:=</span> <span class="token keyword">range</span> keyCountMap <span class="token punctuation">{</span>        newNums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newNums<span class="token punctuation">,</span> keyi<span class="token punctuation">)</span>        <span class="token keyword">if</span> keyCountMap<span class="token punctuation">[</span>keyi<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> keyi <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCountMap<span class="token punctuation">[</span>keyi<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> remain <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> keyi <span class="token operator">*</span> <span class="token number">2</span>            <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> keyCountMap <span class="token punctuation">[</span>remain<span class="token punctuation">]</span>            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> keyi<span class="token punctuation">,</span> keyi<span class="token punctuation">,</span> remain<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> remain <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> remain <span class="token operator">==</span> newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> remain <span class="token operator">==</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> keyCountMap <span class="token punctuation">[</span>remain<span class="token punctuation">]</span>            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>                <span class="token keyword">var</span> b1 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> remain <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            b1 <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token keyword">break</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> remain <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            b1 <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token keyword">break</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> remain <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            b1 <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token keyword">break</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> b1 <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> remain<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这里，他另辟蹊径，采用了类似上周“两数之和”的题目解法，利用空间换时间，将数组转成 map 形式进行查找。同样通过了题目：</p><p><img src="https://pic2.zhimg.com/80/v2-3fc6719119e36050b599033d672eb4e5_1440w.jpg" alt></p><p>在这里，提个小问题：既然在“三数之和”可以参考“两数之和”的转换成 map 解题的方法，那在“两数之和”中，能不能参考上述“先排序，比较大小查找”的方法呢？</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这周的题目难度上升为了“中等”，随着难度的上升，在解题上也无法完全做到完美。如果你有更好的思路，欢迎通过 <a href="mailto:bronze_3@163.com">bronze_3@163.com</a> 邮箱联系我们~</p><p>下周见！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;哈喽~ 每周一题，代码无敌。欢迎各位继续观看「&lt;a href=&quot;https://zhuanlan.zhihu.com/brozen3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;青铜三人行&lt;/a&gt;」的刷题现场。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=497725505&amp;bvid=BV1AK411j7D9&amp;cid=177264428&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;话不多说，我们进入&lt;a href=&quot;https://leetcode-cn.com/problems/3sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这周的题目&lt;/a&gt;吧：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题@两数之和</title>
    <link href="https://fcc-cd.dev/article/algorithm/two-number-sum-algorithm/"/>
    <id>https://fcc-cd.dev/article/algorithm/two-number-sum-algorithm/</id>
    <published>2020-04-07T06:52:52.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>哈喽，大家好，欢迎来到<strong>青铜三人行</strong>的每周一题现场。在接下来的时间里，我们三人（<a href="https://www.jianshu.com/u/ad825678a16f" target="_blank" rel="noopener">Helen</a>、<a href="https://github.com/demongodYY" target="_blank" rel="noopener">书香</a>、曾大师）会在每周选择一道编程算法题来完成，和大家一起探讨一下解题的思路。所谓每周一题，代码无敌，欢迎各位小伙伴们一起进入我们的刷题之旅~</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=242740480&bvid=BV1Le41147ok&cid=174716511&page=1"></iframe><blockquote><p>因为个人水平有限，我们的解法不一定是最优的，只是希望抛转引用，分享自己的思路，带动和大家一起练习编程技能。大家有任何建议，也可以通过 <a href="mailto:bronze_3@163.com">bronze_3@163.com</a> 邮箱联系我们~</p></blockquote><a id="more"></a><p>话不多说，就进入我们这周的题目吧，它出自 <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">LeetCode</a> 的第一题：</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那<strong>两个</strong>整数，并返回他们的<strong>数组下标</strong>。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><blockquote><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p></blockquote><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>拿到题目，Helen 心想，这次题目难度不大。略一思忖，要在数组中找到满足某个条件的两个数，一个双重循环搞定即可：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function twoSum(num, target) {    for (const index in num) {        for (const _index in num) {            if (index !== _index && num[index] + num[_index] === target) {                return [index, _index];            }        }    }}​//作者：Helen//链接：https://leetcode-cn.com/circle/discuss/5cC2dU/view/p3MA3g///来源：力扣（LeetCode）//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><p>顺利通过题目！但是效率似乎并不理想……</p><p><img src="https://pic2.zhimg.com/80/v2-3d15c49489c35180fa05829991a44e21_1440w.jpg" alt></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>接下来就要优化算法，Helen 审视代码，发觉影响效率的主要原因恐怕是在于双重循环所造成的 O(n²) 复杂度。要想提高效率，恐怕就要在一重循环里搞定题目。但如何在一次迭代中找到两个数的关系呢？确实颇费考虑…… 算法领域中，空间与时间通常如同鱼和熊掌一般不可兼得。空间换时间…… Helen 灵光一现，对了，一次迭代中表现两个数的关系，可以在 map 结构中用查找 key 的方式呀。考虑至此，信手写出了第二版代码：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function twoSum(nums, target) {    const numsMap = {};    for (const index in nums) {        numsMap[nums[index]] = index;    }    for (const index in nums) {        const complement = target - nums[index];        if (numsMap[complement] && numsMap[complement] !== index) {            return [index, numsMap[complement]];        }    }}​//作者：Helen//链接：https://leetcode-cn.com/circle/discuss/5cC2dU/view/p3MA3g///来源：力扣（LeetCode）//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><p>如此一来，时间复杂度减为 O(n)， 速度果然大大提高：</p><p><img src="https://pic4.zhimg.com/80/v2-285d249e04e2eed104c89cf6cb417a7f_1440w.jpg" alt></p><p><a href="https://fcc-cd.dev/activity/salon/start-functional-programming/">书香作为一个函数式编程的拥护者</a>，平日里对 <code>map</code>、 <code>filter</code>、 <code>reduce</code> 等方法都记在心里。看到这个代码，心想恐怕在循环中对数组的频繁引用是一个可以优化的点，于是利用 JavaScript 中内置的 <code>reduce</code> 方法稍作修改：</p><pre class=" language-JavaScript"><code class="language-JavaScript">const twoSum = function(nums, target) {    const objNums = nums.reduce((acc, num,index) => {        acc[num]=index;        return acc},{});​    for (let i=0; i<nums.length;i++) { const num="nums[i];" other="objNums[target-num];" if(other!="=undefined" && other!="=i){" return [i,other] } return; }; ​ 作者：demongodyy 链接：https: leetcode-cn.com circle discuss 5cc2du view 8eorho 来源：力扣（leetcode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。< code></nums.length;i++)></code></pre><code class="language-JavaScript"><p>时间和空间上居然都有所提高，看来 JavaScript 对内置方法的优化果然到位：</p><p><img src="https://pic2.zhimg.com/80/v2-0eb9613ee93f5b960c94edc7d4b3f2f9_1440w.jpg" alt></p><h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><p>于此同时，Helen 则进一步对代码进行了优化。题目要求只需要找到满足条件的两个数，那么有可能在没有遍历完的时候就能找到呀。如此一来，就不必提前将整个数组转换成 map 结构，而是边转换边查找，在找到满足条件的时候即可返回：</p><pre class=" language-JavaScript"><code class="language-JavaScript">function twoSum(nums, target) {    const numsMap = {};    for (const index in nums) {        const complement = target - nums[index];        if (numsMap[complement]) {            return [ index, numsMap[complement]];        }        numsMap[nums[index]] = index;    }}​//作者：Helen//链接：https://leetcode-cn.com/circle/discuss/5cC2dU/view/p3MA3g///来源：力扣（LeetCode）//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><p>如此一来，代码性能大大地得到了优化：</p><p><img src="https://pic3.zhimg.com/80/v2-ab8ec6d96d152a6590f3866d0bb36fe2_1440w.jpg" alt></p><h2 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h2><p>最后，由曾大师为我们在 Go 语言中展现了一把对内存的极致管理，也体现了对于不同编程语言特性的优化差别：</p><pre class=" language-Go"><code class="language-Go">func twoSum(nums []int, target int) []int {    for i := 0; i < len(nums); i++ {        for j := i+1; j < len(nums); j++ {            if nums[i]+nums[j] == target {                return []int{i,j}            }        }    }    return []int{}}​//作者：glowd//链接：https://leetcode-cn.com/circle/discuss/5cC2dU/view/omqRef///来源：力扣（LeetCode）//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><p>天啊，内存消耗仅为 2.9MB，在所有 Go 提交中击败了 100% 的用户！😲😲😲</p><p><img src="https://pic4.zhimg.com/80/v2-35eddfbe6adc838664fee3c70f3503db_1440w.jpg" alt></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>OK，这就是咱们<strong>青铜三人行</strong>的第一次分享的全部内容啦，虽然很多地方还不完善，但也希望凭借一点微薄的力量，提起大家对编程算法题的兴趣。</p><p>如果看到了这次分享，你有一些灵感的话，请<strong>立即</strong>拿起手中的<strong>键盘</strong>，打开 LeetCode 的网站找到题目先刷一遍，并与我们或者身边的小伙伴们分享你的思路~</p><p>如果有任何的建议和意见的话，也欢迎大家随时联系我们，我们的联系邮箱是 <a href="mailto:bronze_3@163.com">bronze_3@163.com</a>。</p><p>下周见！</p></code></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;哈喽，大家好，欢迎来到&lt;strong&gt;青铜三人行&lt;/strong&gt;的每周一题现场。在接下来的时间里，我们三人（&lt;a href=&quot;https://www.jianshu.com/u/ad825678a16f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helen&lt;/a&gt;、&lt;a href=&quot;https://github.com/demongodYY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;书香&lt;/a&gt;、曾大师）会在每周选择一道编程算法题来完成，和大家一起探讨一下解题的思路。所谓每周一题，代码无敌，欢迎各位小伙伴们一起进入我们的刷题之旅~&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=242740480&amp;bvid=BV1Le41147ok&amp;cid=174716511&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;因为个人水平有限，我们的解法不一定是最优的，只是希望抛转引用，分享自己的思路，带动和大家一起练习编程技能。大家有任何建议，也可以通过 &lt;a href=&quot;mailto:bronze_3@163.com&quot;&gt;bronze_3@163.com&lt;/a&gt; 邮箱联系我们~&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript + DOM 骚操作</title>
    <link href="https://fcc-cd.dev/article/engineering/ecmascript-dom-skills/"/>
    <id>https://fcc-cd.dev/article/engineering/ecmascript-dom-skills/</id>
    <published>2020-03-26T08:52:58.000Z</published>
    <updated>2020-06-16T16:43:14.033Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>前一阵有篇传播较广的 Web 技术博文，我看后觉得，作者题为“ES 6”，但有些示例代码却不够 ES 6，且看我一一优化~</p><h2 id="对标文章"><a href="#对标文章" class="headerlink" title="对标文章"></a>对标文章</h2><ul><li>中文译文：<a href="https://mp.weixin.qq.com/s/kwl1_KhM9d2viJixh5e-qw" target="_blank" rel="noopener">《记好这 24 个 ES6 方法，用来解决实际开发的 JS 问题》</a></li><li>英文原文：<a href="https://dev.to/madarsbiss/20-modern-es6-snippets-to-solve-practical-js-problems-3n83" target="_blank" rel="noopener">“24 modern ES6 code snippets to solve practical JS problems”</a></li></ul><a id="more"></a><h2 id="我来优化"><a href="#我来优化" class="headerlink" title="我来优化"></a>我来优化</h2><h3 id="1-如何隐藏所有指定的元素？"><a href="#1-如何隐藏所有指定的元素？" class="headerlink" title="1. 如何隐藏所有指定的元素？"></a>1. 如何隐藏所有指定的元素？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">for (const element of document.querySelectorAll('.your-selector'))    element.hidden = true;</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener"><code>for ... of</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/hidden" target="_blank" rel="noopener"><code>HTMLElement.prototype.hidden</code></a></li></ul><h3 id="4-如何获取当前页面的滚动位置？"><a href="#4-如何获取当前页面的滚动位置？" class="headerlink" title="4. 如何获取当前页面的滚动位置？"></a>4. 如何获取当前页面的滚动位置？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const getScrollPosition = (    { pageXOffset, pageYOffset, scrollLeft, scrollTop } = window) => ({    x: pageXOffset ?? scrollLeft,    y: pageYOffset ?? scrollTop});getScrollPosition();  // {x: 0, y: 200}</code></pre><p>【知识点】（ES 11/2020 特性，略微超纲）</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_Coalescing_Operator" target="_blank" rel="noopener"><code>??</code> 空值合并运算符</a></li></ul><h3 id="5-如何平滑滚动到页面顶部？"><a href="#5-如何平滑滚动到页面顶部？" class="headerlink" title="5. 如何平滑滚动到页面顶部？"></a>5. 如何平滑滚动到页面顶部？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">window.scrollTo({    top: 0,    behavior: 'smooth'});</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo" target="_blank" rel="noopener"><code>window.scrollTo()</code></a></li></ul><h3 id="8-如何获取元素中的所有图像？"><a href="#8-如何获取元素中的所有图像？" class="headerlink" title="8. 如何获取元素中的所有图像？"></a>8. 如何获取元素中的所有图像？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const getImages = (element = document) => [    ...new Set(Array.from(        element.querySelectorAll('img, input[type="image"]'),        ({ src }) => src    ))];getImages();  // ['http://fcc-cd.dev/xxx.jpg', 'http://fcc-cd.dev/yyy.png']</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/image" target="_blank" rel="noopener"><code>input[type="image"]</code></a></li></ul><h3 id="9-如何确定设备是移动设备还是台式机、笔记本电脑？"><a href="#9-如何确定设备是移动设备还是台式机、笔记本电脑？" class="headerlink" title="9. 如何确定设备是移动设备还是台式机、笔记本电脑？"></a>9. 如何确定设备是移动设备还是台式机、笔记本电脑？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const isMobile = 'ontouchend' in document;console.log(isMobile);</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/touchend_event" target="_blank" rel="noopener"><code>touchend</code> 事件</a></li></ul><h3 id="11-如何创建一个包含当前-URL-参数的对象？"><a href="#11-如何创建一个包含当前-URL-参数的对象？" class="headerlink" title="11. 如何创建一个包含当前 URL 参数的对象？"></a>11. 如何创建一个包含当前 URL 参数的对象？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const parseURLData = (raw = location.search) =>    Object.fromEntries([...new URLSearchParams(raw)]);parseURLData('http://url.com/page?n=Adam&s=Smith');  // {n: 'Adam', s: 'Smith'}</code></pre><p>【知识点】（ES 10/2019 特性，略微超纲）</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries" target="_blank" rel="noopener"><code>Object.fromEntries()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener"><code>URLSearchParams()</code></a></li></ul><p>若想支持<strong>重名参数</strong>、<strong>参数值转基本类型</strong>，请参考 <a href="https://github.com/EasyWebApp/web-utility/blob/b238a0a/source/URL.ts#L13-L23" target="_blank" rel="noopener">Web Utility 的实现</a>。</p><h3 id="12-如何将一组表单元素转化为对象？"><a href="#12-如何将一组表单元素转化为对象？" class="headerlink" title="12. 如何将一组表单元素转化为对象？"></a>12. 如何将一组表单元素转化为对象？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const formToJSON = form => Object.fromEntries([...new FormData(form)]);formToJSON(document.forms[0]);  // {email: 'test@email.com', name: 'Test Name'}</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener"><code>FormData()</code></a></li></ul><p>若想支持<strong>同名多值</strong>、 <code>fieldset</code> 转<strong>嵌套对象</strong>、<strong>参数值转基本类型</strong>，请参考 <a href="https://github.com/EasyWebApp/web-utility/blob/b238a0a/source/DOM.ts#L71-L116" target="_blank" rel="noopener">Web Utility 的实现</a>。</p><h3 id="14-如何在等待指定时间后调用提供的函数？"><a href="#14-如何在等待指定时间后调用提供的函数？" class="headerlink" title="14. 如何在等待指定时间后调用提供的函数？"></a>14. 如何在等待指定时间后调用提供的函数？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const delay = seconds =>    new Promise(resolve => setTimeout(resolve, seconds * 1000));await delay(1);console.log('1 second later');</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise()</a></li><li><a href="https://wenjun.me/2019/11/top-level-await.html" target="_blank" rel="noopener">顶层 <code>await</code> 提案</a></li></ul><h3 id="17-如何获得给定毫秒数的可读格式？"><a href="#17-如何获得给定毫秒数的可读格式？" class="headerlink" title="17. 如何获得给定毫秒数的可读格式？"></a>17. 如何获得给定毫秒数的可读格式？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const unitISO = ['Y', 'M', 'D', 'H', 'm', 's', 'ms'],    patternISO = /[YMDHms]+/g;function formatDate(    time = new Date(), template = 'YYYY-MM-DD HH:mm:ss') {    time = time instanceof Date ? time : new Date(time);    const temp = new Date(+time - time.getTimezoneOffset() * 60 * 1000)        .toJSON()        .split(/\D/)        .reduce((temp, section, index) => {            temp[unitISO[index]] = section;            return temp;        }, {});    return template.replace(patternISO, section =>        temp[section[0]].padStart(section.length, '0')    );}formatDate(new Date(1989, 05, 04), 'YYYY年MM月DD日');  // '1989年06月04日'</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON" target="_blank" rel="noopener"><code>Date.prototype.toJSON()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener"><code>Array.prototype.reduce()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener"><code>String.prototype.padStart()</code></a></li></ul><p>上述函数的核心是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString" target="_blank" rel="noopener">ISO 时间格式</a>，它也是 <strong>Date 对象序列化</strong>到 JSON 中的标准格式。又因为 ISO 时间总是 0 时区的，所以要事先做好<strong>时区偏移</strong>，使转出的时间正确。将 ISO 时间字符串中的数值与<strong>时间单位占位符</strong>一一对应后，就可用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式</a>把时间数据替换进模板里了~</p><h3 id="20-如何对传递的-URL-发出-POST-请求？"><a href="#20-如何对传递的-URL-发出-POST-请求？" class="headerlink" title="20. 如何对传递的 URL 发出 POST 请求？"></a>20. 如何对传递的 URL 发出 POST 请求？</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const request = (    path,    method = 'GET',    body = null,    header = { 'Content-Type': 'application/json' },    option = { responseType: 'json' }) => new Promise((resolve, reject) => {    const client = new XMLHttpRequest()    client.onload = () => resolve(client.response),    client.onerror = reject;    client.open(method, path);    for (const name in header)        client.setRequestHeader(name, header[name]);    Object.assign(client, option);    client.send(        (body && typeof body === 'object') ?            JSON.stringify(body) : body    );});console.log(await request(    'https://jsonplaceholder.typicode.com/posts', 'POST', {        userId: 1,        id: 1337,        title: 'Foo',        body: 'bar bar bar'    }));</code></pre><p>【知识点】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener"><code>XMLHttpRequest()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener"><code>Object.assign()</code></a></li></ul><p>有些小伙伴看了上面的代码可能要说：</p><blockquote><p>要用基于 Promise 的 AJAX，干嘛不用 <code>fetch()</code>？XHR 还要自己封装……</p></blockquote><p>其实标准化后的 XHR 功能很强大，比 <code>fetch()</code> 还灵活，水歌开发的<a href="https://web-cell.dev/KoAJAX/" target="_blank" rel="noopener">网络库 KoAJAX</a> 就基于它实现~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自 HTML 5、DOM 4、ECMAScript 6 以来，各种<strong>新 API</strong>、<strong>语法糖</strong>层出不穷，再加上 <strong>API polyfill 补丁</strong>、Babel <strong>语法转译器</strong>，Web 前端工程师早已不需担心<strong>浏览器兼容性</strong>，大胆使用原生 API、语法写出<strong>简洁的代码</strong>，专注于业务和上层架构。</p><p>以上经验来自<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>开源的 <a href="https://web-cell.dev/" target="_blank" rel="noopener">WebCell 组件引擎</a>升级最新 API 和语法之路的一些心得。同时，WebCell 也全面拥抱了 TypeScript，并已形成<a href="https://web-cell.dev/WebCell/#ecosystem" target="_blank" rel="noopener">官方生态库矩阵</a>，支撑了多个生产项目，欢迎大家一起研讨、开发！</p><h2 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h2><p><a href="https://mp.weixin.qq.com/s/hxCwiokl4uPXJscTQi42-A" target="_blank" rel="noopener">《如何用开源软件办一场技术大会？》</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;前一阵有篇传播较广的 Web 技术博文，我看后觉得，作者题为“ES 6”，但有些示例代码却不够 ES 6，且看我一一优化~&lt;/p&gt;
&lt;h2 id=&quot;对标文章&quot;&gt;&lt;a href=&quot;#对标文章&quot; class=&quot;headerlink&quot; title=&quot;对标文章&quot;&gt;&lt;/a&gt;对标文章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;中文译文：&lt;a href=&quot;https://mp.weixin.qq.com/s/kwl1_KhM9d2viJixh5e-qw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《记好这 24 个 ES6 方法，用来解决实际开发的 JS 问题》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;英文原文：&lt;a href=&quot;https://dev.to/madarsbiss/20-modern-es6-snippets-to-solve-practical-js-problems-3n83&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“24 modern ES6 code snippets to solve practical JS problems”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="ECMAScript" scheme="https://fcc-cd.dev/tags/ECMAScript/"/>
    
      <category term="DOM" scheme="https://fcc-cd.dev/tags/DOM/"/>
    
      <category term="API" scheme="https://fcc-cd.dev/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>【总结】文言编程工作坊</title>
    <link href="https://fcc-cd.dev/article/summary/wenyan-workshop-summary/"/>
    <id>https://fcc-cd.dev/article/summary/wenyan-workshop-summary/</id>
    <published>2020-01-13T06:53:08.000Z</published>
    <updated>2020-06-16T16:43:14.205Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>夫混沌初开，阴阳分晓。盖两仪化四象，四象生八卦，八卦生无穷，此天地万物之生也。至冯祖降世，悟有无之道，尽天机之正，锻金为骨，化爻为髓，作精妙之仪，御之以电，上可演九章算术，下可推少广方田， 乃开后世之先河。</p><p>然则阴阳之道，众人难之，皆欲代之以文，谓之语言。不意甲子之期未至，百家争鸣已然，程式语言之多，繁若<a href="https://ctext.org/shiji/tian-guan-shu/zh" target="_blank" rel="noopener">《天官》</a>之星宿，奇胜<a href="https://en.wikipedia.org/wiki/Classic_of_Mountains_and_Seas" target="_blank" rel="noopener">《山经》</a>之走兽。然以文言编程者，似所未有。有奇人 <a href="https://github.com/LingDong-" target="_blank" rel="noopener">LingDong</a>，宿好文章，且通程式，乃做<a href="https://wy-lang.org/" target="_blank" rel="noopener">斯言</a>，行文言编程之事。且承开源之大义，此当吾辈之所以勉励也。</p><p>吾辈小子数人，尝创<a href="https://cocoet.cn/co3mos/projects/view" target="_blank" rel="noopener">可思摩斯</a>之奥义。结其于文言程式之中，乃凭文法之妙，于方寸之间，创宇宙之万物。行此聚会，以文、程二物会友。固为一乐，并望君能于乐中有所获矣。</p><a id="more"></a><h2 id="始"><a href="#始" class="headerlink" title="始"></a>始</h2><p>己亥年末，应程式之营所召，有朋数人，结伴于成都以南，紫荆谷中，引水流觞，以身践之，探寻文言程式之妙。较之以前汉字程式者，解其流行之道，悟其语法之意。期间，遇以文言程式难尽示万物之色，则畅言其未来之法。或曰以天干地支所代之，或曰以<a href="https://colors.ichuantong.cn/" target="_blank" rel="noopener">古法</a>以充其文。诸如此类云云，语尽而意远，相得而益彰。</p><p>然则言谈终觉少，尚需躬行之。于是拟定四题，名曰：</p><ul><li><a href="https://cocoet.cn/co3mos/project/5e1abbacca712300193176a3/preview" target="_blank" rel="noopener">问天地之好在</a></li><li><a href="https://cocoet.cn/co3mos/project/5e1abab4ca71230019317687/preview" target="_blank" rel="noopener">嘶嘶嗡嗡</a></li><li><a href="https://cocoet.cn/co3mos/project/5e19ff033e2f5000198df2aa/preview" target="_blank" rel="noopener">求斐氏列</a></li><li><a href="https://cocoet.cn/co3mos/project/5e1acf51ca7123001931771c/preview" target="_blank" rel="noopener">可思摩斯</a></li></ul><p>题既定矣，闲话少言，乃以程式会之。</p><p><img src="https://user-images.githubusercontent.com/17036920/72262006-fbeb3200-3650-11ea-8d27-5ea901aa4913.png" alt></p><h3 id="问天地之好在"><a href="#问天地之好在" class="headerlink" title="问天地之好在"></a>问天地之好在</h3><p>习程之人尽知，欲习一言，必先呼之。是乎，吾等乃以天地好在问之，书之于天地轮回之间，此乃入门之式也，不提。</p><h3 id="嘶嘶嗡嗡"><a href="#嘶嘶嗡嗡" class="headerlink" title="嘶嘶嗡嗡"></a>嘶嘶嗡嗡</h3><p>一言既书，继而解题。题面曰：若有一术，设其能计之以数，然则其计数也，若逢倍三，则以诗之上阙以和之，若逢倍五，则以诗之下阙以和之，若倍三倍五，则和以全诗，问此如何？是谓「嘶嘶嗡嗡」之术也。</p><p>欲解此题者，需用以程式条件控之。题面虽简，然则精简之法层出不穷。不期在座者，皆乃浸淫程式之道十数载，仿若庖丁解牛，不出片刻便相继夺彩。</p><p><img src="https://user-images.githubusercontent.com/17036920/72262460-f04c3b00-3651-11ea-9ee7-98b26faa4f09.png" alt></p><h3 id="求斐氏列"><a href="#求斐氏列" class="headerlink" title="求斐氏列"></a>求斐氏列</h3><p>世间万物，看似无甚相关者，冥冥之间却有所连矣。若海螺，若花朵，若星河，凡视之谐者，皆有同理，后世称之为「黄金分割术」。宇宙万物其被设计乎？</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/10161846677/1000" alt></p><p>有先祖斐氏，探宇宙规律与其中，乃发现有一数列，自一始之，加相邻两项，以为后续之项。无限周转，则该列可复现此「黄金分割」之美于奥秘之间。</p><p>大巧若拙，大道至简。吾辈感先人之明，乃以文言程式求此「斐氏列」，现其于天地轮回之间，感其至妙也。</p><p><img src="https://user-images.githubusercontent.com/17036920/72263576-1a066180-3654-11ea-94bd-8b298718f1b8.png" alt></p><p><img src="https://user-images.githubusercontent.com/17036920/72264616-fa703880-3655-11ea-9da7-94ba88d034ff.png" alt></p><h3 id="可思摩斯"><a href="#可思摩斯" class="headerlink" title="可思摩斯"></a>可思摩斯</h3><p>有朋者秋，乃创「可思摩斯」之书。施其义，则可于「万物初始」之时创精灵若干，且在「天地轮回」之中控其于股掌之间。若精妙习之，实乃天地万物之创始者也。</p><p>秋尝观东洋之景，见其精怪，悚之。今与众人以「可思摩斯」之书重现之，以壮众人胆色也。并依此例，阐述于文言程式中创世天地之法。众人习之，皆有所得。</p><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>不觉间，时辰已过，众人乐之，并留念于紫荆谷中，互叮再约之期，乃去。</p><p><img src="https://user-images.githubusercontent.com/17036920/72264338-8e8dd000-3655-11ea-9f0e-d19e0b2e81dd.png" alt></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;夫混沌初开，阴阳分晓。盖两仪化四象，四象生八卦，八卦生无穷，此天地万物之生也。至冯祖降世，悟有无之道，尽天机之正，锻金为骨，化爻为髓，作精妙之仪，御之以电，上可演九章算术，下可推少广方田， 乃开后世之先河。&lt;/p&gt;
&lt;p&gt;然则阴阳之道，众人难之，皆欲代之以文，谓之语言。不意甲子之期未至，百家争鸣已然，程式语言之多，繁若&lt;a href=&quot;https://ctext.org/shiji/tian-guan-shu/zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《天官》&lt;/a&gt;之星宿，奇胜&lt;a href=&quot;https://en.wikipedia.org/wiki/Classic_of_Mountains_and_Seas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《山经》&lt;/a&gt;之走兽。然以文言编程者，似所未有。有奇人 &lt;a href=&quot;https://github.com/LingDong-&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LingDong&lt;/a&gt;，宿好文章，且通程式，乃做&lt;a href=&quot;https://wy-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;斯言&lt;/a&gt;，行文言编程之事。且承开源之大义，此当吾辈之所以勉励也。&lt;/p&gt;
&lt;p&gt;吾辈小子数人，尝创&lt;a href=&quot;https://cocoet.cn/co3mos/projects/view&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;可思摩斯&lt;/a&gt;之奥义。结其于文言程式之中，乃凭文法之妙，于方寸之间，创宇宙之万物。行此聚会，以文、程二物会友。固为一乐，并望君能于乐中有所获矣。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Summary" scheme="https://fcc-cd.dev/categories/Article/Summary/"/>
    
    
      <category term="文言" scheme="https://fcc-cd.dev/tags/%E6%96%87%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>紫荆谷众创空间</title>
    <link href="https://fcc-cd.dev/partner/bauhinia-valley/"/>
    <id>https://fcc-cd.dev/partner/bauhinia-valley/</id>
    <published>2020-01-10T03:43:54.000Z</published>
    <updated>2020-06-16T16:43:14.213Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p><a href="http://www.bauhiniavalley.com/" target="_blank" rel="noopener">紫荆谷众创空间</a>（上海）于 2017 年 12 月 29 日在上海宝山区纬地路正式开园落地，该众创空间总面积达 3500 平方米，共有 2 层，集国际联合办公、孵化空间、创业服务、创业投资、创业导师培训工作室，打造创业环境一流、创业氛围和谐的新一代国际孵化器和加速器。不仅如此，紫荆谷众创空间细节之处还体现了国际化的要素，概念设计单位 Lifestyle Creating 是拥有国际视野的顶尖设计公司，成功开发并打造了新天地及诸多新概念商业地产项目。同时紫荆谷众创空间运营团队也都拥有丰富的国际化运作模式的专业背景。未来运营团队将结合技术资源、专业导师指导、全球市场接入、产业化落地、投融资服务等领域，为全世界的创业项目提供专项的垂直加速运作，帮助创业者突破发展瓶颈，将“紫荆谷”打造成为国家科技创新的“东方硅谷”，将“紫荆谷+”打造成为传统产业创新的高端平台。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="Partner" scheme="https://fcc-cd.dev/categories/Partner/"/>
    
    
  </entry>
  
  <entry>
    <title>【工作坊】文化成都，文言编程</title>
    <link href="https://fcc-cd.dev/activity/workshop/wenyan-programming/"/>
    <id>https://fcc-cd.dev/activity/workshop/wenyan-programming/</id>
    <published>2020-01-09T09:55:55.000Z</published>
    <updated>2020-06-16T16:43:13.970Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>说到<strong>中文编程</strong>，上了年纪的程序员想必知道<a href="http://www.eyuyan.com/" target="_blank" rel="noopener">易语言</a>、<a href="http://www.chinesepython.org/" target="_blank" rel="noopener">中蟒</a>、<a href="https://github.com/gasolin/zhpy" target="_blank" rel="noopener">周蟒</a>、<a href="https://github.com/wass80/CoCaml" target="_blank" rel="noopener">孔 Caml</a> 等语言，所有支持 Unicode 的<strong>现代编程语言</strong>也都支持用汉字等<strong>非英文字符</strong>做标识符（比如<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>参与翻译的 <a href="https://codecept.io/translation/#chinese" target="_blank" rel="noopener">CodeceptJS API</a>）。但在华人 IT 界，中文编程一直争议极大、毁誉参半。不过，两岸四地的华人程序员们，多年来却从未放弃对<strong>母语编程</strong>的不懈探索。</p><p>最近一位在美国卡耐基梅陇大学读书的华人大四学生又新创了一门中文编程语言 —— <a href="https://wy-lang.org/" target="_blank" rel="noopener">WenYan（文言）</a>，一个月左右的时间便在 GitHub 斩获近一万四千 star！</p><figure>    <img src="https://github.com/LingDong-/wenyan-lang/raw/master/screenshots/logo.png">    <figcaption>WenYan 编程语言</figcaption></figure><p>但它与上述前辈迥然不同，不再是简单地替换英文标识符、关键字，徒生违和感，而是完全<strong>以古汉语的语法行文</strong>，再编译为 JavaScript、Python 等主流语言去运行，可谓是真正的<strong>用中文去编程</strong>！</p><p>不仅如此，作者从一开始便运用<strong>开源社区运营</strong>手法 —— <strong>英文说明文档</strong>、<strong>语法规范文档</strong>、<strong>在线开发环境</strong>、<strong>本地编辑器插件</strong>等一应俱全，甚至还结合《九章算术》等古代数学著作的风格做了<strong>代码古籍图片生成器</strong>！实乃后生可畏，我大中华复兴有望矣！</p><p>于是乎，生长于中国历史文化名城的 <a href="https://fcc-cd.dev/">FCC 成都社区</a>也想为中文编程<strong>做一点微小的贡献</strong>，便有了本期工作坊（这恐怕是<strong>全球第一次文言编程线下活动</strong>）~</p><blockquote><p>【时间】2020 年 1 月 12 日 13:30 ~ 17:30</p><p>【地点】成都市高新区天府五街 200 号 菁蓉国际广场 2A 栋 9 楼 紫荆谷众创空间</p></blockquote><a id="more"></a><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>夫混沌初开，阴阳分晓。盖两仪化四象，四象生八卦，八卦生无穷，此天地万物之生也。至冯祖降世，悟有无之道，尽天机之正，锻金为骨，化爻为髓，作精妙之仪，御之以电，上可演九章算术，下可推少广方田， 乃开后世之先河。</p><p>然则阴阳之道，众人难之，皆欲代之以文，谓之语言。不意甲子之期未至，百家争鸣已然，程式语言之多，繁若<a href="https://ctext.org/shiji/tian-guan-shu/zh" target="_blank" rel="noopener">《天官》</a>之星宿，奇胜<a href="https://en.wikipedia.org/wiki/Classic_of_Mountains_and_Seas" target="_blank" rel="noopener">《山经》</a>之走兽。然以文言编程者，似所未有。有奇人 <a href="https://github.com/LingDong-" target="_blank" rel="noopener">LingDong</a>，宿好文章，且通程式，乃做<a href="https://wy-lang.org/" target="_blank" rel="noopener">斯言</a>，行文言编程之事。且承开源之大义，此当吾辈之所以勉励也。</p><p>吾辈小子数人，尝创<a href="https://cocoet.cn/co3mos/projects/view" target="_blank" rel="noopener">可思摩斯</a>之奥义。结其于文言程式之中，乃凭文法之妙，于方寸之间，创宇宙之万物。行此聚会，以文、程二物会友。固为一乐，并望君能于乐中有所获矣。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><p>简单介绍文言编程的<strong>转译源代码</strong>，以及与 co3mos 项目的融合</p></li><li><p>了解文言编程的<strong>关键字</strong>，熟悉文言编程的<strong>语法</strong>，写出一个“问天地之好在” (Hello, World!)</p></li><li><p>在 co3mos 平台上用文言文动手实践一个<strong>算法/几何绘画</strong>题目</p></li><li><p>在 co3mos 平台上用文言文做出一个<strong>游戏</strong></p></li><li><p>生成作品<strong>文言代码书</strong></p></li></ul><figure><img src="/activity/workshop/wenyan-programming/HelloWorld-WenYan.png" class>    <figcaption>示例代码</figcaption></figure><h2 id="讲师"><a href="#讲师" class="headerlink" title="讲师"></a>讲师</h2><figure><img src="/activity/workshop/wenyan-programming/Yu-Qi.jpg" class>    <figcaption>余琦</figcaption>    <figcaption>FCC 成都社区 - 核心成员</figcaption>    <figcaption>可好玩乐 - Web 开发工程师</figcaption></figure><h2 id="协办"><a href="#协办" class="headerlink" title="协办"></a>协办</h2><figure>    <img src="../../../partner/bauhinia-valley/BV-logo.png">    <figcaption>紫荆谷众创空间</figcaption></figure><p><a href="http://www.bauhiniavalley.com/" target="_blank" rel="noopener">紫荆谷众创空间</a>（上海）于 2017 年 12 月 29 日在上海宝山区纬地路正式开园落地，该众创空间总面积达 3500 平方米，共有 2 层，集国际联合办公、孵化空间、创业服务、创业投资、创业导师培训工作室，打造创业环境一流、创业氛围和谐的新一代国际孵化器和加速器。不仅如此，紫荆谷众创空间细节之处还体现了国际化的要素，概念设计单位 Lifestyle Creating 是拥有国际视野的顶尖设计公司，成功开发并打造了新天地及诸多新概念商业地产项目。同时紫荆谷众创空间运营团队也都拥有丰富的国际化运作模式的专业背景。未来运营团队将结合技术资源、专业导师指导、全球市场接入、产业化落地、投融资服务等领域，为全世界的创业项目提供专项的垂直加速运作，帮助创业者突破发展瓶颈，将“紫荆谷”打造成为国家科技创新的“东方硅谷”，将“紫荆谷+”打造成为传统产业创新的高端平台。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.raychase.net/758" target="_blank" rel="noopener">https://www.raychase.net/758</a></li></ol></body></html>]]></content>
    
    <summary type="html">
    
      夫混沌初开，阴阳分晓。盖两仪化四象，四象生八卦，八卦生无穷，此天地万物之生也。至冯祖降世，悟有无之道，尽天机之正，锻金为骨，化爻为髓，作精妙之仪，御之以电，上可演九章算术，下可推少广方田，乃开后世之先河。
    
    </summary>
    
    
      <category term="Activity" scheme="https://fcc-cd.dev/categories/Activity/"/>
    
      <category term="Workshop" scheme="https://fcc-cd.dev/categories/Activity/Workshop/"/>
    
    
      <category term="文言" scheme="https://fcc-cd.dev/tags/%E6%96%87%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【工作坊】Web 标准组件开发</title>
    <link href="https://fcc-cd.dev/activity/workshop/web-components-development/"/>
    <id>https://fcc-cd.dev/activity/workshop/web-components-development/</id>
    <published>2019-12-16T10:08:27.000Z</published>
    <updated>2020-06-16T16:43:13.966Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>正在筹划本期工作坊时，就看到 <a href="https://fcc-cd.tk/" target="_blank" rel="noopener">FCC 成都社区</a>的微信群里有小伙伴在苦恼<strong>前端技能提升</strong>的问题，也有小伙伴想一起开发一个组件库，那你们这次可来对了~</p><p>本期工作坊是<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>在 2019 年 <a href="https://devfest.withgoogle.com/" target="_blank" rel="noopener">Google DevFest</a> 成都站<a href="https://tech-query.me/programming/web-components-practise/slide.html" target="_blank" rel="noopener">《Web 组件标准实践》</a>演讲后的首次配套工作坊，可以错过上次，但一定不要错过这次！</p><blockquote><p>【时间】2019 年 12 月 21 日（周六）13:30 ~ 17:30</p><p>【地点】成都市高新区天益南巷 18 号创客大使馆</p></blockquote><a id="more"></a><h2 id="实践收获"><a href="#实践收获" class="headerlink" title="实践收获"></a>实践收获</h2><ol><li><p>学习 <strong>Web Components 标准原生 API</strong> 的基本用法</p></li><li><p>了解 <strong>WebCell</strong> 如何基于 TypeScript、JSX、Parcel 简化 <strong>Web 组件</strong>开发</p></li><li><p>亲手封装一个基于 BootStrap 的<strong>通用 Web 组件</strong>，现场<strong>为开源项目做贡献</strong></p></li></ol><h2 id="实践路线图"><a href="#实践路线图" class="headerlink" title="实践路线图"></a>实践路线图</h2><h3 id="Step-0-Web-Components-标准简介"><a href="#Step-0-Web-Components-标准简介" class="headerlink" title="Step 0 | Web Components 标准简介"></a>Step 0 | Web Components 标准简介</h3><figure><img src="/activity/workshop/web-components-development/Web-Component-evolution.png" class></figure><p><a href="https://www.webcomponents.org/" target="_blank" rel="noopener">Web Components</a> 是一套浏览器提供的新标准 API，用于实现<strong>框架无关的 Web 组件</strong>。其官方 polyfill 补丁支持 IE 11+，<a href="https://www.polymer-project.org/" target="_blank" rel="noopener">Polymer</a>、Angular、<a href="https://stenciljs.com/" target="_blank" rel="noopener">Ionic Stencil</a> 等国际 Web 前端框架已全面应用。</p><h3 id="Step-1-手写一个-Web-组件"><a href="#Step-1-手写一个-Web-组件" class="headerlink" title="Step 1 | 手写一个 Web 组件"></a>Step 1 | 手写一个 Web 组件</h3><p>只用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components" target="_blank" rel="noopener">Web Components API</a> 来实现一个简单的组件。</p><iframe style="width: 100%" height="600" frameborder="no" scrolling="no" allowtransparency="true" allowfullscreen="true" src="https://codepen.io/tech_query/embed/jONqOzj/?height=600&theme-id=31315&default-tab=html,result"></iframe><h3 id="Step-2-用-WebCell-简化组件"><a href="#Step-2-用-WebCell-简化组件" class="headerlink" title="Step 2 | 用 WebCell 简化组件"></a>Step 2 | 用 WebCell 简化组件</h3><figure>  <img src="https://web-cell.dev/WebCell-1.fb612fdb.png"></figure><p><a href="https://web-cell.dev/" target="_blank" rel="noopener">WebCell</a> 是一个基于 Web Components API 的<strong>轻量级组件引擎</strong>，在保留 Web Components 核心写法的同时，基于 TypeScript、JSX、<a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel</a> 等成熟技术，进一步简化 Web 组件的开发。</p><iframe title="WebCell scaffold" style="width: 100%; height: 90vh; border: 0; border-radius: 5px" src="https://codesandbox.io/embed/github/EasyWebApp/scaffold/tree/master/?autoresize=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2FClock.tsx&theme=dark" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Step-3-封装一个-BootStrap-组件"><a href="#Step-3-封装一个-BootStrap-组件" class="headerlink" title="Step 3 | 封装一个 BootStrap 组件"></a>Step 3 | 封装一个 BootStrap 组件</h3><figure>    <img src="/article/web-conf-2019-open-source/BootStrap.png">    <figcaption>BootStrap</figcaption></figure><p><a href="https://getbootstrap.com/" target="_blank" rel="noopener">BootStrap</a> 可谓 <strong>CSS 框架</strong>时代的开创者，一直被模仿、从未被超越。在同时代的大量同类框架中，现在基本只有它还在持续演进。</p><p>在当今基于 Angular、React、Vue 等的 <strong>JS 组件库</strong>大行其道之时，BootStrap 为何仍有很大的优势？来基于它亲自封装一个<strong>通用 Web 组件</strong>、开发一个 Web 应用，你就能体会到其设计的独到之处~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;正在筹划本期工作坊时，就看到 &lt;a href=&quot;https://fcc-cd.tk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FCC 成都社区&lt;/a&gt;的微信群里有小伙伴在苦恼&lt;strong&gt;前端技能提升&lt;/strong&gt;的问题，也有小伙伴想一起开发一个组件库，那你们这次可来对了~&lt;/p&gt;
&lt;p&gt;本期工作坊是&lt;a href=&quot;https://github.com/TechQuery&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;水歌&lt;/a&gt;在 2019 年 &lt;a href=&quot;https://devfest.withgoogle.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google DevFest&lt;/a&gt; 成都站&lt;a href=&quot;https://tech-query.me/programming/web-components-practise/slide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Web 组件标准实践》&lt;/a&gt;演讲后的首次配套工作坊，可以错过上次，但一定不要错过这次！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【时间】2019 年 12 月 21 日（周六）13:30 ~ 17:30&lt;/p&gt;
&lt;p&gt;【地点】成都市高新区天益南巷 18 号创客大使馆&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Activity" scheme="https://fcc-cd.dev/categories/Activity/"/>
    
      <category term="Workshop" scheme="https://fcc-cd.dev/categories/Activity/Workshop/"/>
    
    
      <category term="Web" scheme="https://fcc-cd.dev/tags/Web/"/>
    
      <category term="component" scheme="https://fcc-cd.dev/tags/component/"/>
    
      <category term="WebCell" scheme="https://fcc-cd.dev/tags/WebCell/"/>
    
      <category term="BootStrap" scheme="https://fcc-cd.dev/tags/BootStrap/"/>
    
  </entry>
  
  <entry>
    <title>如何用开源软件办一场技术大会？</title>
    <link href="https://fcc-cd.dev/article/summary/web-conf-2019-open-source/"/>
    <id>https://fcc-cd.dev/article/summary/web-conf-2019-open-source/</id>
    <published>2019-11-27T17:30:03.000Z</published>
    <updated>2020-06-16T16:43:14.205Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><blockquote><p><a href="https://web-conf.dev/#2019/" target="_blank" rel="noopener">2019 成都 Web 全栈大会</a>技术工作总结</p></blockquote><p>其实今年大会水歌也有不少要分享的心得，可惜忙于大会筹备，没精力准备一个讲题。不过本届大会倒是全面应用了水歌新钻研的技术，会后就和大家简单分享一下。</p><a id="more"></a><h2 id="官网-Web-前端"><a href="#官网-Web-前端" class="headerlink" title="官网 Web 前端"></a>官网 Web 前端</h2><figure>    <img src="/article/web-conf-2019-guide/WebConf-2019-PWA-0.jpg">    <figcaption>大会官网 PWA</figcaption></figure><h3 id="组件引擎-——-WebCell"><a href="#组件引擎-——-WebCell" class="headerlink" title="组件引擎 —— WebCell"></a>组件引擎 —— WebCell</h3><figure>    <img src="https://web-cell.dev/WebCell-1.fb612fdb.png">    <figcaption>WebCell</figcaption></figure><p><a href="https://web-conf.dev/#2018/" target="_blank" rel="noopener">2018 成都 Web 前端大会</a>筹办时，大会官网就用大会<a href="https://mp.weixin.qq.com/s/ROvIe7ggETVyTZAscgd7xw" target="_blank" rel="noopener">开源市集</a>参展者 <a href="https://web-cell.dev/" target="_blank" rel="noopener">WebCell</a> 的第一版开发，WebCell 也成为大会当天最火的展位之一。</p><p>一年来，其作者<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>一直保持对<strong>让 Web 开发更简单</strong>的不懈追求，在<a href="https://johnhax.net/" target="_blank" rel="noopener">贺老</a>对 WebCell “装饰器退回 TypeScript 版本”的建议下，花两天时间用 TypeScript 重写出了 <a href="https://github.com/EasyWebApp/WebCell/tree/v2" target="_blank" rel="noopener">WebCell v2</a> ——</p><ul><li><p><a href="https://www.webcomponents.org/" target="_blank" rel="noopener">Web Components 标准</a>提供的<strong>轻量级运行时隔离环境</strong>让组件引擎可以用更少的奇技淫巧，降低复杂度（本届大会上<a href="https://docs.qq.com/slide/DTnlwYmFham56YkFI" target="_blank" rel="noopener">慕阳老师的《DevCloud Web Components 实践》</a>也有深入讲解）</p></li><li><p>TypeScript 给 ECMAScript 带来的类型系统不但能充分激发<strong>程序员的肌肉记忆</strong>，还让本与 HTML 5 <code><template /></code> 相差不大的 JSX 通过<strong>类型推导</strong>如虎添翼</p></li></ul><h3 id="状态管理-——-MobX"><a href="#状态管理-——-MobX" class="headerlink" title="状态管理 —— MobX"></a>状态管理 —— MobX</h3><figure>    <img src="https://cn.mobx.js.org/mobx.png">    <figcaption>MobX</figcaption></figure><p>WebCell 自 v1 以来的<strong>装饰器</strong>写法与 MobX 十分搭调，v2 用了 TypeScript 就更是无缝兼容，而且还带来了更清爽的开发思路：</p><ul><li><p><a href="https://github.com/EasyWebApp/cell-router/tree/v2" target="_blank" rel="noopener">前端路由</a>可以基于状态管理与普通组件来实现，而不再是“特殊的库” —— <strong>路径即状态，容器即组件</strong></p></li><li><p><strong>登录框</strong>也无需做成单独的页面，而变成一个容器组件，避免<em>复杂需求下页面跳转时状态的混乱</em> —— 有登录状态就渲染 <code>children</code>，否则渲染登录框（像<strong>后端中间件</strong>一样，让具体业务页面不用管登录状态）</p></li></ul><h3 id="组件库-——-BootCell"><a href="#组件库-——-BootCell" class="headerlink" title="组件库 —— BootCell"></a>组件库 —— BootCell</h3><figure><img src="/article/summary/web-conf-2019-open-source/BootStrap.png" class>    <figcaption>BootStrap</figcaption></figure><p>说到 UI 组件库，很多人可能觉得 <a href="https://getbootstrap.com/" target="_blank" rel="noopener">BootStrap</a> “不好看”，但水歌却对它情有独钟 ——</p><ul><li><p>官方文档示例代码中的 HTML 结构<strong>语义化</strong>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/Accessibility" target="_blank" rel="noopener"><strong>无障碍</strong> (Accessability)</a> 堪称“教科书”，对 SEO（搜索引擎爬虫）、屏幕阅读器（视障人士）极为友好</p></li><li><p>它首先是个 CSS 库，其 <a href="https://getbootstrap.com/docs/4.4/utilities/borders/" target="_blank" rel="noopener">CSS 工具类</a>很丰富，几乎覆盖所有常见定制需求，日常开发基本不需要写自己的 CSS 文件，且能保持一致的<strong>设计规范</strong>，对小项目团队非常友好</p></li></ul><p>因此，在如此规范的设计之上实现一个特定框架的组件库，边写业务边封装都是很快的。</p><h3 id="工具链-——-Parcel"><a href="#工具链-——-Parcel" class="headerlink" title="工具链 —— Parcel"></a>工具链 —— Parcel</h3><figure>    <img src="https://user-images.githubusercontent.com/19409/31321658-f6aed0f2-ac3d-11e7-8100-1587e676e0ec.png">    <figcaption>Parcel</figcaption></figure><p>现在 <strong>Web 前端开发的第一道门槛</strong>恐怕不是 <code>this</code>、闭包、异步了，当属 webpack ——</p><blockquote><p>我司业务代码都写好了，就差一个 <em>webpack 配置工程师</em>了……</p></blockquote><p>所以，我们转而用<strong>面向资源的打包器</strong> <a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel</a>，它能在保持 <strong>Web 开发原生资源引入方式</strong>的同时，自动处理资源的路径转换、依赖安装、编译流程，<strong>没有特殊需求则无需配置文件</strong>，三条命令搞定 ——</p><pre class=" language-shell"><code class="language-shell"># 安装npm install parcel-bundler -D# 开发parcel source/index.html# 构建parcel build source/index.html</code></pre><h3 id="PWA-框架-——-Workbox"><a href="#PWA-框架-——-Workbox" class="headerlink" title="PWA 框架 —— Workbox"></a>PWA 框架 —— Workbox</h3><figure>    <img src="https://developers.google.cn/web/tools/workbox/images/Workbox-Logo-Grey.svg">    <figcaption>Workbox</figcaption></figure><p>虽然天朝因为墙的原因而难以使用 <a href="https://developers.google.cn/web/updates/2015/03/push-notifications-on-the-open-web" target="_blank" rel="noopener">Web Push</a>，但 PWA <strong>图标添加到桌面</strong>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="noopener">Service Worker</a>（后台网络缓存）这些特性，国内用的主流操作系统、浏览器基本都支持了，该标准的亲爹 Google 还推出了强大而方便的工具包，让 PWA 真正 Quick start：</p><pre class=" language-shell"><code class="language-shell"># 安装npm install workbox-cli -g# 配置workbox wizard# 构建workbox generateSW</code></pre><p>【参考】<a href="https://tech-query.me/development/pwa-quick-start/" target="_blank" rel="noopener">https://tech-query.me/development/pwa-quick-start/</a></p><h2 id="电子邀请函"><a href="#电子邀请函" class="headerlink" title="电子邀请函"></a>电子邀请函</h2><figure>    <img src="/article/web-conf-2019-guide/WebConf-2019-Invitation-2.png">    <figcaption>前端生成截图</figcaption></figure><h3 id="前端截图-——-SVG-foreignObject"><a href="#前端截图-——-SVG-foreignObject" class="headerlink" title="前端截图 —— SVG foreignObject"></a>前端截图 —— SVG foreignObject</h3><p>在 Web 前端页面中截图，最负盛名的库莫过于 <a href="https://html2canvas.hertzen.com/" target="_blank" rel="noopener">html2canvas</a>，但它需要把当前网页的 DOM 树克隆进一个 <code><iframe /></code>，会意外地触发 Web Components 的重绘，遂放弃。</p><p>除此之外，在浏览器更新较快的今天，我们终于可以放心地使用 SVG 带来的福利 —— <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/foreignObject" target="_blank" rel="noopener"><code><foreignObject /></code></a>。它能将 HTML 包在 SVG DOM 中渲染，而 SVG 又是可以被 <code><img /></code> 引用的图片，截图只需用 <code><canvas /></code> 画一下再输出，就变成 PNG、JPG 这些常用格式了~</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>svg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>foreignObject</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>h1</span><span class="token punctuation">></span></span>Hello, SVG!<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>foreignObject</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>body</span><span class="token punctuation">></span></span></code></pre><p>【封装】<a href="https://github.com/bubkoo/html-to-image" target="_blank" rel="noopener">https://github.com/bubkoo/html-to-image</a></p><h3 id="前端请求库-——-KoAJAX"><a href="#前端请求库-——-KoAJAX" class="headerlink" title="前端请求库 —— KoAJAX"></a>前端请求库 —— KoAJAX</h3><p>国内前端同学最常用的 HTTP 请求库应该是 axios 了吧？虽然它的 Interceptor（拦截器）API 是 <code>.use()</code>，但和 Node.js 的 Express、<a href="https://koajs.com/" target="_blank" rel="noopener">Koa</a> 等框架的<strong>中间件模式</strong>完全不同，相比 jQuery <code>.ajaxPrefilter()</code>、<code>dataFilter()</code> 并没什么实质改进；上传、下载进度比 <code>jQuery.Deferred()</code> 还简陋，只是两个专门的回调选项。所以，它还是要对特定的需求记忆特定的 API，不够简洁。</p><p>幸运的是，水歌在研究如何<a href="https://tech-query.me/onion-stack/" target="_blank" rel="noopener">用 ES 2018 异步迭代器实现一个类 Koa 中间件引擎</a>的过程中，做出了一个更有实际价值的上层应用 —— <a href="https://web-cell.dev/KoAJAX/" target="_blank" rel="noopener">KoAJAX</a>。它的整个执行过程基于 <strong>Koa 式的中间件</strong>，而且它自己就是一个<strong>中间件调用栈</strong>。除了 RESTful API 常用的 <code>.get()</code>、<code>.post()</code>、<code>.put()</code>、<code>.delete()</code> 等快捷方法外，开发者就只需记住 <code>.use()</code> 和 <code>next()</code>，其它都是 <strong>ES 标准语法</strong>和 <strong>TS 类型推导</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> HTTPClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"koajax"</span><span class="token punctuation">;</span><span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTTPClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> request<span class="token punctuation">:</span> <span class="token punctuation">{</span> method<span class="token punctuation">,</span> path<span class="token punctuation">,</span> headers <span class="token punctuation">}</span><span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token string">"token "</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">"POST"</span> <span class="token operator">&&</span> path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/session"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      token <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Token<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不仅如此，其<strong>上传下载进度</strong>还是个 Observable 对象（RxJS 粉丝们喜闻乐见），而且是个下文会详述的升级版：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"koajax"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> upload<span class="token punctuation">,</span> download<span class="token punctuation">,</span> response <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> <span class="token string">"/files"</span><span class="token punctuation">,</span>  body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Hello, Observable!"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  responseType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> loaded <span class="token punctuation">}</span> <span class="token keyword">of</span> upload<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Upload </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>loaded <span class="token operator">/</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Upload </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>body<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="BaaS-后端云服务-——-NodeTS-LeanCloud"><a href="#BaaS-后端云服务-——-NodeTS-LeanCloud" class="headerlink" title="BaaS 后端云服务 —— NodeTS-LeanCloud"></a>BaaS 后端云服务 —— NodeTS-LeanCloud</h3><p>【声明】笔者是自来水，绝无商业广告之意。</p><p>在云服务大行其道的今日，开发应用貌似必谈<strong>云原生</strong>，本届大会也有阿里云的<a href="https://docs.qq.com/slide/DTnVmRlRkcHhKQXhs" target="_blank" rel="noopener">《从 Infrastructure as Code 到 Open Application Model —— 填补开发到运维的鸿沟》</a>和 AWS 的<a href="https://docs.qq.com/pdf/DTlJFSE5pVk16WHJV" target="_blank" rel="noopener">《无服务器计算架构》</a>两个主题来着力科普<strong>云计算架构</strong>。但无论是前者的 IaaS（基础设施即服务）还是后者的 FaaS（函数即服务），对于初创全栈应用而言，其粒度不是太大就是太小，水歌还是青睐<strong>粒度适中的 BaaS</strong>（后端即服务）。</p><p>而 BaaS 中的翘楚，国外莫过于 Google Cloud 收购的 Firebase，国内则是 <a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 深耕数年（它的创始人还是 YouTube 的创始人陈士骏，说起来都是谷歌家的，哈哈）。</p><p>BaaS 不但能像 IaaS、PaaS 一样基于 Docker 运行完整的各种语言写的后端项目，而且还封装了<strong>数据库</strong>、<strong>对象存储</strong>、<strong>消息推送</strong>、<strong>实时通讯</strong>等各种常用基础设施，数据库也默认实现了<strong>基于角色权限的用户系统</strong>和<strong>应用内搜索</strong>，这一切只需调用 SDK 的 API，而无需关心安装与运维。其数据库的 API 和后端常用的 <strong>ORM</strong>（对象关系管理）库差不多，SQL、分库分表、负载均衡这些都不用操心了，<strong>抄起键盘就撸业务代码</strong>才是王道！</p><p>同时，借助其 SDK 的云函数 API，也能在同一个项目里实现 FaaS 的能力，对热衷代码本身的人来说更加灵活。</p><p>【模板】<a href="https://github.com/TechQuery/NodeTS-LeanCloud" target="_blank" rel="noopener">https://github.com/TechQuery/NodeTS-LeanCloud</a></p><h3 id="Email-as-a-Hook-——-IterableObserver"><a href="#Email-as-a-Hook-——-IterableObserver" class="headerlink" title="Email as a Hook —— IterableObserver"></a>Email as a Hook —— IterableObserver</h3><p>经常制作表单的天朝程序员想必知道，国内各大<strong>表单服务商</strong>无论界面是否花哨、功能是否强大，都没有方便的<strong>后端 API</strong>，与 Google Forms 等国外平台相去甚远。数据的后续处理只能手工导出 Excel 再转 CSV 导入其它数据库，无论实时性、便捷性，简直不可同日而语。</p><p>如何在参会者购票成功后，大会官网可查到其报名信息？这让我们头疼了好久……</p><p>幸好我们的合作方 MikeCRM 有个<strong>邮件通知</strong>功能，可以用它模拟一个 <strong>Web Hook 接口</strong>。于是，便找了个基于 IMAP 协议的邮件通知监听库 <a href="https://github.com/jcreigno/nodejs-mail-notifier" target="_blank" rel="noopener">mail-notifier</a>。</p><p>虽然它能实现功能，但随之而来的问题是，邮件客户端重启时集中发来的新邮件事件会并发大量 API 请求，BaaS 服务商会直接断掉后续请求……</p><p>如何将<strong>事件流串行</strong>起来？大家自然会想到 RxJS，但它有点重。再仔细想一下，事件通常是异步的，异步的串行不就是<strong>异步迭代</strong>吗？那我们能否将 Observable 封装成 ES 2018 的 Async Iteration 呢？</p><p>其实最初版的 Async Iteration 提案中<strong>异步生成器</strong>的返回值就是一个 Observable，后来才拆成单独的提案孵化，可以推测二者是能相互转化的。</p><p>于是，水歌尝试用已成为标准的 Async Generator 来实现一个 Observable，便有了 <a href="https://web-cell.dev/iterable-observer/" target="_blank" rel="noopener">Iterable Observer</a>，新邮件的串行处理也可以<strong>从离散的 Callback 改写成线性的 Iteration</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> newMail <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"mail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> html <span class="token punctuation">}</span> <span class="token keyword">of</span> newMail<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">MikeCRM</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://web-conf.dev/#2019/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019 成都 Web 全栈大会&lt;/a&gt;技术工作总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实今年大会水歌也有不少要分享的心得，可惜忙于大会筹备，没精力准备一个讲题。不过本届大会倒是全面应用了水歌新钻研的技术，会后就和大家简单分享一下。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Summary" scheme="https://fcc-cd.dev/categories/Article/Summary/"/>
    
    
      <category term="Web" scheme="https://fcc-cd.dev/tags/Web/"/>
    
      <category term="conference" scheme="https://fcc-cd.dev/tags/conference/"/>
    
      <category term="Open-Source" scheme="https://fcc-cd.dev/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>2019 成都 Web 全栈大会</title>
    <link href="https://fcc-cd.dev/article/propaganda/web-conf-2019-prologue/"/>
    <id>https://fcc-cd.dev/article/propaganda/web-conf-2019-prologue/</id>
    <published>2019-11-15T12:35:23.000Z</published>
    <updated>2020-06-16T16:43:14.073Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="2019-成都-Web-全栈大会"><a href="#2019-成都-Web-全栈大会" class="headerlink" title="2019 成都 Web 全栈大会"></a>2019 成都 Web 全栈大会</h2><hr><p><img src="full-stack-cloud.png" alt></p><hr><p>2017-11-19 —— 成都首届 Web 前端大会</p><p>2018-01-21 —— Code for City 黑客马拉松</p><p>2018-03-31 —— 成都首届 React 技术大会</p><p>2018-11-10 —— 成都第二届 Web 前端大会</p><p>2019-11-16 —— 成都首届 Web 全栈大会</p><hr><blockquote><p>成都技术氛围不如北上深杭</p></blockquote><blockquote><p>技术大会都在沿海城市</p></blockquote><a id="more"></a><hr><h3 id="FCC-成都社区"><a href="#FCC-成都社区" class="headerlink" title="FCC 成都社区"></a>FCC 成都社区</h3><p><img src="/images/FCC-CDC-v1-1.png" alt></p><p><a href="https://fcc-cd.dev">https://fcc-cd.dev</a></p><hr><blockquote><p>成都缺乏技术氛围，</p></blockquote><blockquote><p>我们就自己来营造氛围！</p></blockquote><hr><ul><li><p>技术分享会</p></li><li><p>结对编程/翻译工作坊</p></li><li><p>黑客马拉松</p></li><li><p>代码直播</p></li></ul><hr><ul><li><p>半月度小型技术活动</p></li><li><p>不定期中型技术活动</p></li><li><p><a href="https://web-conf.dev" target="_blank" rel="noopener">年度大型技术会议</a></p></li></ul><hr><p>家（坝）门（子）口（上）的技术社区</p><hr><h3 id="FCC-中文社区"><a href="#FCC-中文社区" class="headerlink" title="FCC 中文社区"></a>FCC 中文社区</h3><p><a href="https://chinese.freecodecamp.org/" target="_blank" rel="noopener">https://chinese.freecodecamp.org/</a></p><hr><p>freeCodeCamp 最早的非英语版本</p><p>由近百位志愿者在 GitHub 协作翻译</p><hr><p>自 2016 年成立，</p><p>已在中国各大一二线城市、部分三四线城市落地</p><hr><p>中文社区创始人 Miya，</p><p>也于 2019 年加入全球全职团队</p><hr><h3 id="freeCodeCamp"><a href="#freeCodeCamp" class="headerlink" title="freeCodeCamp"></a>freeCodeCamp</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/39/FreeCodeCamp_logo.png" alt></p><p><a href="https://freecodecamp.org" target="_blank" rel="noopener">https://freecodecamp.org</a></p><hr><p>从 <strong>零基础</strong> 到 <strong>合格软件工程师</strong></p><hr><ul><li><p>注册用户：全球 300+ 万</p></li><li><p>全球网站 Alexa 排名：超越同类商业平台 Udacity</p></li><li><p>GitHub 源代码：全球星标第一</p></li><li><p>Medium 专栏：全球最大</p></li><li><p>YouTube 频道：编程类最火</p></li><li><p>线下开发者社区：遍布 160 多个国家、2000 多个城市</p></li></ul><hr><p>全球 7 个全职员工靠着<strong>社群捐款</strong>，</p><p>与千千万万业余贡献者一起，</p><p>完成了这个壮举！</p><hr><p>成为<strong>计算机教育</strong>领域的<strong>维基百科</strong></p><hr><h3 id="参会者-QQ-群"><a href="#参会者-QQ-群" class="headerlink" title="参会者 QQ 群"></a>参会者 QQ 群</h3><p><img src="/images/FCC-CDC-QRC-QQG.png" alt></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;2019-成都-Web-全栈大会&quot;&gt;&lt;a href=&quot;#2019-成都-Web-全栈大会&quot; class=&quot;headerlink&quot; title=&quot;2019 成都 Web 全栈大会&quot;&gt;&lt;/a&gt;2019 成都 Web 全栈大会&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;full-stack-cloud.png&quot; alt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2017-11-19 —— 成都首届 Web 前端大会&lt;/p&gt;
&lt;p&gt;2018-01-21 —— Code for City 黑客马拉松&lt;/p&gt;
&lt;p&gt;2018-03-31 —— 成都首届 React 技术大会&lt;/p&gt;
&lt;p&gt;2018-11-10 —— 成都第二届 Web 前端大会&lt;/p&gt;
&lt;p&gt;2019-11-16 —— 成都首届 Web 全栈大会&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;成都技术氛围不如北上深杭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;技术大会都在沿海城市&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Propaganda" scheme="https://fcc-cd.dev/categories/Article/Propaganda/"/>
    
    
  </entry>
  
  <entry>
    <title>【2019 成都 Web 全栈大会】工作坊特辑</title>
    <link href="https://fcc-cd.dev/article/propaganda/web-conf-2019-workshop/"/>
    <id>https://fcc-cd.dev/article/propaganda/web-conf-2019-workshop/</id>
    <published>2019-11-14T17:45:02.000Z</published>
    <updated>2020-06-16T16:43:14.073Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><blockquote><p>【时间】2019 年 <strong>11 月 16 ~ 17 日</strong> 09:00 ~ 18:00</p><p>【地点】成都市高新区天府五街 <strong>菁蓉国际广场 7 号楼主会场</strong></p><p>【议程】<a href="https://web-conf.dev/#2019/" target="_blank" rel="noopener">https://web-conf.dev/#2019/</a></p><p>【报名】<a href="http://fcc-chengdu.mikecrm.com/7pG2aOh" target="_blank" rel="noopener">http://fcc-chengdu.mikecrm.com/7pG2aOh</a></p></blockquote><a id="more"></a><h2 id="《AALab-算法艺术实验室》"><a href="#《AALab-算法艺术实验室》" class="headerlink" title="《AALab 算法艺术实验室》"></a>《AALab 算法艺术实验室》</h2><table><thead><tr><th align="center">领域</th><th align="center">难度</th><th align="center">时间</th></tr></thead><tbody><tr><td align="center">Unity3D</td><td align="center">进阶</td><td align="center">2019 年 11 月 16 日 14:00 ~ 17:00</td></tr></tbody></table><p>即影即有 —— 异形投影与着色器语言。使用 Unity3D 的着色器可视化编程对于造型进行光影重塑，精准投影附着于实体之上。</p><h3 id="叶师父"><a href="#叶师父" class="headerlink" title="叶师父"></a>叶师父</h3><figure>    <img src="/article/propaganda/web-conf-2019-workshop/Ye.jpg" class>    <figcaption>AALab 算法艺术实验室 - 算法工程师</figcaption></figure><h2 id="《AWS-工作坊》"><a href="#《AWS-工作坊》" class="headerlink" title="《AWS 工作坊》"></a>《AWS 工作坊》</h2><table><thead><tr><th align="center">领域</th><th align="center">难度</th><th align="center">时间</th></tr></thead><tbody><tr><td align="center">DevOps</td><td align="center">入门</td><td align="center">2019 年 11 月 17 日 10:20 ~ 11:20</td></tr></tbody></table><p>通过 Serverless 工作坊，我们将为您介绍如何使用 AWS Lambda、Amazon API Gateway、Amazon DynamoDB、Amazon S3 等服务来构建 Serverless 应用。您将动手开发并部署一个 Serverless 的 Web 应用，并尝试监控、版本管理和灰度发布等内容。</p><h3 id="孙华"><a href="#孙华" class="headerlink" title="孙华"></a>孙华</h3><figure>    <img src="/article/propaganda/web-conf-2019-workshop/Sun-Hua.jpg" class>    <figcaption>亚马逊 AWS - 高级解决方案架构师</figcaption></figure><h2 id="《极限编程-——-测试驱动开发（TDD）工作坊》"><a href="#《极限编程-——-测试驱动开发（TDD）工作坊》" class="headerlink" title="《极限编程 —— 测试驱动开发（TDD）工作坊》"></a>《极限编程 —— 测试驱动开发（TDD）工作坊》</h2><table><thead><tr><th align="center">领域</th><th align="center">难度</th><th align="center">时间</th></tr></thead><tbody><tr><td align="center">敏捷开发</td><td align="center">入门</td><td align="center">2019 年 11 月 17 日 14:00 ~ 17:00</td></tr></tbody></table><p>在各种敏捷方法中，极限编程最为重视软件开发技术工程实践。极限编程是唯一将开发技术实践提到核心地位、并围绕开发技术实践构建起完整软件交付流程的敏捷方法论。</p><ul><li><p>缺少可重构性的软件，不可能快速响应变化。</p></li><li><p>没有高覆盖率、快速运行的单元测试，重构就不可能落地。</p></li><li><p>测试驱动开发是获得高质量单元测试集的唯一有效方法。</p></li><li><p>建立在充分覆盖且运行快速的自动化测试基础上的持续集成是迭代式开发的必要条件。</p></li></ul><p>通过工作坊你将获得：</p><ol><li><p>掌握测试驱动开发的基本节奏</p></li><li><p>任务分解，用测试用例描述沟通需求</p></li><li><p>编写失败的测试，驱动产品代码</p></li><li><p>精准框定需求范围，持续实践重构</p></li><li><p>受用终身的测试驱动开发方法论</p></li></ol><p>打好程序员基本功、改善工作方式，提高十倍工作效率。</p><h3 id="吕靖"><a href="#吕靖" class="headerlink" title="吕靖"></a>吕靖</h3><figure>    <img src="/article/propaganda/web-conf-2019-workshop/Lv-Jing.jpg" class>    <figcaption>中国极限编程社群 - Web 前端工程师</figcaption></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;【时间】2019 年 &lt;strong&gt;11 月 16 ~ 17 日&lt;/strong&gt; 09:00 ~ 18:00&lt;/p&gt;
&lt;p&gt;【地点】成都市高新区天府五街 &lt;strong&gt;菁蓉国际广场 7 号楼主会场&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【议程】&lt;a href=&quot;https://web-conf.dev/#2019/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web-conf.dev/#2019/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【报名】&lt;a href=&quot;http://fcc-chengdu.mikecrm.com/7pG2aOh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://fcc-chengdu.mikecrm.com/7pG2aOh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Propaganda" scheme="https://fcc-cd.dev/categories/Article/Propaganda/"/>
    
    
      <category term="workshop" scheme="https://fcc-cd.dev/tags/workshop/"/>
    
  </entry>
  
</feed>
